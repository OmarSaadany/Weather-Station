
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000345c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08003590  08003590  00013590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003800  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000070  08003870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003870  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019fb  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d94  00000000  00000000  00021ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000328  00000000  00000000  00022870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000022f  00000000  00000000  00022b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000149b  00000000  00000000  00022dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001673  00000000  00000000  00024262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004b2b  00000000  00000000  000258d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fc8  00000000  00000000  0002a400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0002b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08003574 	.word	0x08003574

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08003574 	.word	0x08003574

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2f>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a50:	bf24      	itt	cs
 8000a52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5a:	d90d      	bls.n	8000a78 <__aeabi_d2f+0x30>
 8000a5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a70:	bf08      	it	eq
 8000a72:	f020 0001 	biceq.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a7c:	d121      	bne.n	8000ac2 <__aeabi_d2f+0x7a>
 8000a7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a82:	bfbc      	itt	lt
 8000a84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	4770      	bxlt	lr
 8000a8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a92:	f1c2 0218 	rsb	r2, r2, #24
 8000a96:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa2:	bf18      	it	ne
 8000aa4:	f040 0001 	orrne.w	r0, r0, #1
 8000aa8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab4:	ea40 000c 	orr.w	r0, r0, ip
 8000ab8:	fa23 f302 	lsr.w	r3, r3, r2
 8000abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac0:	e7cc      	b.n	8000a5c <__aeabi_d2f+0x14>
 8000ac2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac6:	d107      	bne.n	8000ad8 <__aeabi_d2f+0x90>
 8000ac8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000acc:	bf1e      	ittt	ne
 8000ace:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad6:	4770      	bxne	lr
 8000ad8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_frsub>:
 8000ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	e002      	b.n	8000af4 <__addsf3>
 8000aee:	bf00      	nop

08000af0 <__aeabi_fsub>:
 8000af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af4 <__addsf3>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	bf1f      	itttt	ne
 8000af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000afc:	ea92 0f03 	teqne	r2, r3
 8000b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b08:	d06a      	beq.n	8000be0 <__addsf3+0xec>
 8000b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b12:	bfc1      	itttt	gt
 8000b14:	18d2      	addgt	r2, r2, r3
 8000b16:	4041      	eorgt	r1, r0
 8000b18:	4048      	eorgt	r0, r1
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
 8000b20:	2b19      	cmp	r3, #25
 8000b22:	bf88      	it	hi
 8000b24:	4770      	bxhi	lr
 8000b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4249      	negne	r1, r1
 8000b46:	ea92 0f03 	teq	r2, r3
 8000b4a:	d03f      	beq.n	8000bcc <__addsf3+0xd8>
 8000b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b50:	fa41 fc03 	asr.w	ip, r1, r3
 8000b54:	eb10 000c 	adds.w	r0, r0, ip
 8000b58:	f1c3 0320 	rsb	r3, r3, #32
 8000b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	d502      	bpl.n	8000b6c <__addsf3+0x78>
 8000b66:	4249      	negs	r1, r1
 8000b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b70:	d313      	bcc.n	8000b9a <__addsf3+0xa6>
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b76:	d306      	bcc.n	8000b86 <__addsf3+0x92>
 8000b78:	0840      	lsrs	r0, r0, #1
 8000b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b7e:	f102 0201 	add.w	r2, r2, #1
 8000b82:	2afe      	cmp	r2, #254	; 0xfe
 8000b84:	d251      	bcs.n	8000c2a <__addsf3+0x136>
 8000b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b8e:	bf08      	it	eq
 8000b90:	f020 0001 	biceq.w	r0, r0, #1
 8000b94:	ea40 0003 	orr.w	r0, r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	0049      	lsls	r1, r1, #1
 8000b9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ba8:	d2ed      	bcs.n	8000b86 <__addsf3+0x92>
 8000baa:	fab0 fc80 	clz	ip, r0
 8000bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bba:	bfaa      	itet	ge
 8000bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc0:	4252      	neglt	r2, r2
 8000bc2:	4318      	orrge	r0, r3
 8000bc4:	bfbc      	itt	lt
 8000bc6:	40d0      	lsrlt	r0, r2
 8000bc8:	4318      	orrlt	r0, r3
 8000bca:	4770      	bx	lr
 8000bcc:	f092 0f00 	teq	r2, #0
 8000bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd4:	bf06      	itte	eq
 8000bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bda:	3201      	addeq	r2, #1
 8000bdc:	3b01      	subne	r3, #1
 8000bde:	e7b5      	b.n	8000b4c <__addsf3+0x58>
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d021      	beq.n	8000c34 <__addsf3+0x140>
 8000bf0:	ea92 0f03 	teq	r2, r3
 8000bf4:	d004      	beq.n	8000c00 <__addsf3+0x10c>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	4608      	moveq	r0, r1
 8000bfe:	4770      	bx	lr
 8000c00:	ea90 0f01 	teq	r0, r1
 8000c04:	bf1c      	itt	ne
 8000c06:	2000      	movne	r0, #0
 8000c08:	4770      	bxne	lr
 8000c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c0e:	d104      	bne.n	8000c1a <__addsf3+0x126>
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	bf28      	it	cs
 8000c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c1e:	bf3c      	itt	cc
 8000c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bxcc	lr
 8000c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c38:	bf16      	itet	ne
 8000c3a:	4608      	movne	r0, r1
 8000c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c40:	4601      	movne	r1, r0
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	bf06      	itte	eq
 8000c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4a:	ea90 0f01 	teqeq	r0, r1
 8000c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_ui2f>:
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e004      	b.n	8000c64 <__aeabi_i2f+0x8>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_i2f>:
 8000c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c60:	bf48      	it	mi
 8000c62:	4240      	negmi	r0, r0
 8000c64:	ea5f 0c00 	movs.w	ip, r0
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c70:	4601      	mov	r1, r0
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	e01c      	b.n	8000cb2 <__aeabi_l2f+0x2a>

08000c78 <__aeabi_ul2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e00a      	b.n	8000c9c <__aeabi_l2f+0x14>
 8000c86:	bf00      	nop

08000c88 <__aeabi_l2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	d502      	bpl.n	8000c9c <__aeabi_l2f+0x14>
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	ea5f 0c01 	movs.w	ip, r1
 8000ca0:	bf02      	ittt	eq
 8000ca2:	4684      	moveq	ip, r0
 8000ca4:	4601      	moveq	r1, r0
 8000ca6:	2000      	moveq	r0, #0
 8000ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cac:	bf08      	it	eq
 8000cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cb6:	fabc f28c 	clz	r2, ip
 8000cba:	3a08      	subs	r2, #8
 8000cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc0:	db10      	blt.n	8000ce4 <__aeabi_l2f+0x5c>
 8000cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	f020 0001 	biceq.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	f102 0220 	add.w	r2, r2, #32
 8000ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_fmul>:
 8000d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d12:	ea92 0f0c 	teqne	r2, ip
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d06f      	beq.n	8000dfc <__aeabi_fmul+0xf8>
 8000d1c:	441a      	add	r2, r3
 8000d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d22:	0240      	lsls	r0, r0, #9
 8000d24:	bf18      	it	ne
 8000d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2a:	d01e      	beq.n	8000d6a <__aeabi_fmul+0x66>
 8000d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d38:	fba0 3101 	umull	r3, r1, r0, r1
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d44:	bf3e      	ittt	cc
 8000d46:	0049      	lslcc	r1, r1, #1
 8000d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	ea40 0001 	orr.w	r0, r0, r1
 8000d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d56:	2afd      	cmp	r2, #253	; 0xfd
 8000d58:	d81d      	bhi.n	8000d96 <__aeabi_fmul+0x92>
 8000d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d62:	bf08      	it	eq
 8000d64:	f020 0001 	biceq.w	r0, r0, #1
 8000d68:	4770      	bx	lr
 8000d6a:	f090 0f00 	teq	r0, #0
 8000d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d72:	bf08      	it	eq
 8000d74:	0249      	lsleq	r1, r1, #9
 8000d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d7e:	3a7f      	subs	r2, #127	; 0x7f
 8000d80:	bfc2      	ittt	gt
 8000d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8a:	4770      	bxgt	lr
 8000d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	3a01      	subs	r2, #1
 8000d96:	dc5d      	bgt.n	8000e54 <__aeabi_fmul+0x150>
 8000d98:	f112 0f19 	cmn.w	r2, #25
 8000d9c:	bfdc      	itt	le
 8000d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	4770      	bxle	lr
 8000da4:	f1c2 0200 	rsb	r2, r2, #0
 8000da8:	0041      	lsls	r1, r0, #1
 8000daa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dae:	f1c2 0220 	rsb	r2, r2, #32
 8000db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dba:	f140 0000 	adc.w	r0, r0, #0
 8000dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc2:	bf08      	it	eq
 8000dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc8:	4770      	bx	lr
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fmul+0xce>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xe6>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_fmul+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	bf18      	it	ne
 8000e06:	ea93 0f0c 	teqne	r3, ip
 8000e0a:	d00a      	beq.n	8000e22 <__aeabi_fmul+0x11e>
 8000e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e10:	bf18      	it	ne
 8000e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	d1d8      	bne.n	8000dca <__aeabi_fmul+0xc6>
 8000e18:	ea80 0001 	eor.w	r0, r0, r1
 8000e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	bf17      	itett	ne
 8000e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e2c:	4608      	moveq	r0, r1
 8000e2e:	f091 0f00 	teqne	r1, #0
 8000e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e36:	d014      	beq.n	8000e62 <__aeabi_fmul+0x15e>
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_fmul+0x13e>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d10f      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e42:	ea93 0f0c 	teq	r3, ip
 8000e46:	d103      	bne.n	8000e50 <__aeabi_fmul+0x14c>
 8000e48:	024b      	lsls	r3, r1, #9
 8000e4a:	bf18      	it	ne
 8000e4c:	4608      	movne	r0, r1
 8000e4e:	d108      	bne.n	8000e62 <__aeabi_fmul+0x15e>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e60:	4770      	bx	lr
 8000e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_fdiv>:
 8000e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e74:	bf1e      	ittt	ne
 8000e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7a:	ea92 0f0c 	teqne	r2, ip
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d069      	beq.n	8000f58 <__aeabi_fdiv+0xec>
 8000e84:	eba2 0203 	sub.w	r2, r2, r3
 8000e88:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e92:	d037      	beq.n	8000f04 <__aeabi_fdiv+0x98>
 8000e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	bf38      	it	cc
 8000ea8:	005b      	lslcc	r3, r3, #1
 8000eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	bf24      	itt	cs
 8000eb6:	1a5b      	subcs	r3, r3, r1
 8000eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ece:	bf24      	itt	cs
 8000ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	bf18      	it	ne
 8000eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eee:	d1e0      	bne.n	8000eb2 <__aeabi_fdiv+0x46>
 8000ef0:	2afd      	cmp	r2, #253	; 0xfd
 8000ef2:	f63f af50 	bhi.w	8000d96 <__aeabi_fmul+0x92>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f0c:	327f      	adds	r2, #127	; 0x7f
 8000f0e:	bfc2      	ittt	gt
 8000f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f18:	4770      	bxgt	lr
 8000f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	3a01      	subs	r2, #1
 8000f24:	e737      	b.n	8000d96 <__aeabi_fmul+0x92>
 8000f26:	f092 0f00 	teq	r2, #0
 8000f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2e:	bf02      	ittt	eq
 8000f30:	0040      	lsleq	r0, r0, #1
 8000f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f36:	3a01      	subeq	r2, #1
 8000f38:	d0f9      	beq.n	8000f2e <__aeabi_fdiv+0xc2>
 8000f3a:	ea40 000c 	orr.w	r0, r0, ip
 8000f3e:	f093 0f00 	teq	r3, #0
 8000f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0049      	lsleq	r1, r1, #1
 8000f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4e:	3b01      	subeq	r3, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xda>
 8000f52:	ea41 010c 	orr.w	r1, r1, ip
 8000f56:	e795      	b.n	8000e84 <__aeabi_fdiv+0x18>
 8000f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f5c:	ea92 0f0c 	teq	r2, ip
 8000f60:	d108      	bne.n	8000f74 <__aeabi_fdiv+0x108>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	f47f af7d 	bne.w	8000e62 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	f47f af70 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e776      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f74:	ea93 0f0c 	teq	r3, ip
 8000f78:	d104      	bne.n	8000f84 <__aeabi_fdiv+0x118>
 8000f7a:	024b      	lsls	r3, r1, #9
 8000f7c:	f43f af4c 	beq.w	8000e18 <__aeabi_fmul+0x114>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e76e      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f88:	bf18      	it	ne
 8000f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	d1ca      	bne.n	8000f26 <__aeabi_fdiv+0xba>
 8000f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f94:	f47f af5c 	bne.w	8000e50 <__aeabi_fmul+0x14c>
 8000f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f9c:	f47f af3c 	bne.w	8000e18 <__aeabi_fmul+0x114>
 8000fa0:	e75f      	b.n	8000e62 <__aeabi_fmul+0x15e>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <AFIO_voidsetEXTIAltFunc>:
 * Returns:- 			Void
 * Description:-
 * 		initializes DIO pins to be use as EXTI
 */
void		AFIO_voidsetEXTIAltFunc(u8 PORT, u8 pin)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	 *		         -0110: PG
	 *
	 */

	// if pin less than or equal 3 use EXTICR1 register (0,1,2 and 3)
	if (pin <=3)
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d847      	bhi.n	800108a <AFIO_voidsetEXTIAltFunc+0xa6>
	{
		switch (PORT)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d02c      	beq.n	800105a <AFIO_voidsetEXTIAltFunc+0x76>
 8001000:	2b02      	cmp	r3, #2
 8001002:	f300 812b 	bgt.w	800125c <AFIO_voidsetEXTIAltFunc+0x278>
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <AFIO_voidsetEXTIAltFunc+0x2c>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d00d      	beq.n	800102a <AFIO_voidsetEXTIAltFunc+0x46>


		}

	}
}
 800100e:	e125      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTA:	AFIO->EXTICR1&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 8001010:	4b95      	ldr	r3, [pc, #596]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	79ba      	ldrb	r2, [r7, #6]
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	210f      	movs	r1, #15
 800101a:	fa01 f202 	lsl.w	r2, r1, r2
 800101e:	43d2      	mvns	r2, r2
 8001020:	4611      	mov	r1, r2
 8001022:	4a91      	ldr	r2, [pc, #580]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001024:	400b      	ands	r3, r1
 8001026:	6093      	str	r3, [r2, #8]
						break;									 // Do nothing but clear in case if PORTA as its value = 0b0000
 8001028:	e118      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTB:	AFIO->EXTICR1&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 800102a:	4b8f      	ldr	r3, [pc, #572]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	210f      	movs	r1, #15
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	43d2      	mvns	r2, r2
 800103a:	4611      	mov	r1, r2
 800103c:	4a8a      	ldr	r2, [pc, #552]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800103e:	400b      	ands	r3, r1
 8001040:	6093      	str	r3, [r2, #8]
						AFIO->EXTICR1|=((0b00000001)<<(pin*4));	 // write in these 4 bits the value of PORTB which is = 0b0001
 8001042:	4b89      	ldr	r3, [pc, #548]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	79ba      	ldrb	r2, [r7, #6]
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	4611      	mov	r1, r2
 8001052:	4a85      	ldr	r2, [pc, #532]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001054:	430b      	orrs	r3, r1
 8001056:	6093      	str	r3, [r2, #8]
						break;
 8001058:	e100      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTC:	AFIO->EXTICR1&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 800105a:	4b83      	ldr	r3, [pc, #524]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	79ba      	ldrb	r2, [r7, #6]
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	210f      	movs	r1, #15
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	43d2      	mvns	r2, r2
 800106a:	4611      	mov	r1, r2
 800106c:	4a7e      	ldr	r2, [pc, #504]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800106e:	400b      	ands	r3, r1
 8001070:	6093      	str	r3, [r2, #8]
						AFIO->EXTICR1|=((0b00000010)<<(pin*4));	 // write in these 4 bits the value of PORTC which is = 0b0010
 8001072:	4b7d      	ldr	r3, [pc, #500]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	79ba      	ldrb	r2, [r7, #6]
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	2102      	movs	r1, #2
 800107c:	fa01 f202 	lsl.w	r2, r1, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4a79      	ldr	r2, [pc, #484]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001084:	430b      	orrs	r3, r1
 8001086:	6093      	str	r3, [r2, #8]
						break;
 8001088:	e0e8      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
	else if (pin <=7)
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	2b07      	cmp	r3, #7
 800108e:	d84a      	bhi.n	8001126 <AFIO_voidsetEXTIAltFunc+0x142>
		pin-=4;
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	3b04      	subs	r3, #4
 8001094:	71bb      	strb	r3, [r7, #6]
		switch (PORT)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d02c      	beq.n	80010f6 <AFIO_voidsetEXTIAltFunc+0x112>
 800109c:	2b02      	cmp	r3, #2
 800109e:	f300 80dd 	bgt.w	800125c <AFIO_voidsetEXTIAltFunc+0x278>
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <AFIO_voidsetEXTIAltFunc+0xc8>
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d00d      	beq.n	80010c6 <AFIO_voidsetEXTIAltFunc+0xe2>
}
 80010aa:	e0d7      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTA:	AFIO->EXTICR2&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 80010ac:	4b6e      	ldr	r3, [pc, #440]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	79ba      	ldrb	r2, [r7, #6]
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	210f      	movs	r1, #15
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	4611      	mov	r1, r2
 80010be:	4a6a      	ldr	r2, [pc, #424]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80010c0:	400b      	ands	r3, r1
 80010c2:	60d3      	str	r3, [r2, #12]
						break;                                   // Do nothing but clear in case if PORTA as its value = 0b0000
 80010c4:	e0ca      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTB:	AFIO->EXTICR2&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 80010c6:	4b68      	ldr	r3, [pc, #416]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	79ba      	ldrb	r2, [r7, #6]
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	210f      	movs	r1, #15
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	43d2      	mvns	r2, r2
 80010d6:	4611      	mov	r1, r2
 80010d8:	4a63      	ldr	r2, [pc, #396]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80010da:	400b      	ands	r3, r1
 80010dc:	60d3      	str	r3, [r2, #12]
						AFIO->EXTICR2|=((0b00000001)<<(pin*4));	 // write in these 4 bits the value of PORTB which is = 0b0001
 80010de:	4b62      	ldr	r3, [pc, #392]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	79ba      	ldrb	r2, [r7, #6]
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ec:	4611      	mov	r1, r2
 80010ee:	4a5e      	ldr	r2, [pc, #376]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80010f0:	430b      	orrs	r3, r1
 80010f2:	60d3      	str	r3, [r2, #12]
						break;
 80010f4:	e0b2      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTC:	AFIO->EXTICR2&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 80010f6:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	79ba      	ldrb	r2, [r7, #6]
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	210f      	movs	r1, #15
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	43d2      	mvns	r2, r2
 8001106:	4611      	mov	r1, r2
 8001108:	4a57      	ldr	r2, [pc, #348]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800110a:	400b      	ands	r3, r1
 800110c:	60d3      	str	r3, [r2, #12]
						AFIO->EXTICR2|=((0b00000010)<<(pin*4));	 // write in these 4 bits the value of PORTC which is = 0b0010
 800110e:	4b56      	ldr	r3, [pc, #344]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	79ba      	ldrb	r2, [r7, #6]
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	2102      	movs	r1, #2
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	4611      	mov	r1, r2
 800111e:	4a52      	ldr	r2, [pc, #328]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001120:	430b      	orrs	r3, r1
 8001122:	60d3      	str	r3, [r2, #12]
						break;
 8001124:	e09a      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
	else if (pin <=11)
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	2b0b      	cmp	r3, #11
 800112a:	d84a      	bhi.n	80011c2 <AFIO_voidsetEXTIAltFunc+0x1de>
		pin-=8;
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	3b08      	subs	r3, #8
 8001130:	71bb      	strb	r3, [r7, #6]
		switch (PORT)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d02c      	beq.n	8001192 <AFIO_voidsetEXTIAltFunc+0x1ae>
 8001138:	2b02      	cmp	r3, #2
 800113a:	f300 808f 	bgt.w	800125c <AFIO_voidsetEXTIAltFunc+0x278>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <AFIO_voidsetEXTIAltFunc+0x164>
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00d      	beq.n	8001162 <AFIO_voidsetEXTIAltFunc+0x17e>
}
 8001146:	e089      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTA:	AFIO->EXTICR3&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 8001148:	4b47      	ldr	r3, [pc, #284]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	79ba      	ldrb	r2, [r7, #6]
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	210f      	movs	r1, #15
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	43d2      	mvns	r2, r2
 8001158:	4611      	mov	r1, r2
 800115a:	4a43      	ldr	r2, [pc, #268]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800115c:	400b      	ands	r3, r1
 800115e:	6113      	str	r3, [r2, #16]
						break;                                   // Do nothing but clear in case if PORTA as its value = 0b0000
 8001160:	e07c      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTB:	AFIO->EXTICR3&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	79ba      	ldrb	r2, [r7, #6]
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	210f      	movs	r1, #15
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	43d2      	mvns	r2, r2
 8001172:	4611      	mov	r1, r2
 8001174:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001176:	400b      	ands	r3, r1
 8001178:	6113      	str	r3, [r2, #16]
						AFIO->EXTICR3|=((0b00000001)<<(pin*4));	 // write in these 4 bits the value of PORTB which is = 0b0001
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	2101      	movs	r1, #1
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	4611      	mov	r1, r2
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800118c:	430b      	orrs	r3, r1
 800118e:	6113      	str	r3, [r2, #16]
						break;
 8001190:	e064      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTC:	AFIO->EXTICR3&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 8001192:	4b35      	ldr	r3, [pc, #212]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	79ba      	ldrb	r2, [r7, #6]
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	210f      	movs	r1, #15
 800119c:	fa01 f202 	lsl.w	r2, r1, r2
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	4611      	mov	r1, r2
 80011a4:	4a30      	ldr	r2, [pc, #192]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80011a6:	400b      	ands	r3, r1
 80011a8:	6113      	str	r3, [r2, #16]
						AFIO->EXTICR3|=((0b00000010)<<(pin*4));	 // write in these 4 bits the value of PORTC which is = 0b0010
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	79ba      	ldrb	r2, [r7, #6]
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	2102      	movs	r1, #2
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	4611      	mov	r1, r2
 80011ba:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80011bc:	430b      	orrs	r3, r1
 80011be:	6113      	str	r3, [r2, #16]
						break;
 80011c0:	e04c      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
	else if (pin <=15)
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d849      	bhi.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		pin-=12;
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	3b0c      	subs	r3, #12
 80011cc:	71bb      	strb	r3, [r7, #6]
		switch (PORT)
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d02b      	beq.n	800122c <AFIO_voidsetEXTIAltFunc+0x248>
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	dc41      	bgt.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <AFIO_voidsetEXTIAltFunc+0x1fe>
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d00d      	beq.n	80011fc <AFIO_voidsetEXTIAltFunc+0x218>
}
 80011e0:	e03c      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTA:	AFIO->EXTICR4&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	79ba      	ldrb	r2, [r7, #6]
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	210f      	movs	r1, #15
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	43d2      	mvns	r2, r2
 80011f2:	4611      	mov	r1, r2
 80011f4:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80011f6:	400b      	ands	r3, r1
 80011f8:	6153      	str	r3, [r2, #20]
						break;                                   // Do nothing but clear in case if PORTA as its value = 0b0000
 80011fa:	e02f      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTB:	AFIO->EXTICR4&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	79ba      	ldrb	r2, [r7, #6]
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	210f      	movs	r1, #15
 8001206:	fa01 f202 	lsl.w	r2, r1, r2
 800120a:	43d2      	mvns	r2, r2
 800120c:	4611      	mov	r1, r2
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001210:	400b      	ands	r3, r1
 8001212:	6153      	str	r3, [r2, #20]
						AFIO->EXTICR4|=((0b00000001)<<(pin*4));	 // write in these 4 bits the value of PORTB which is = 0b0001
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	79ba      	ldrb	r2, [r7, #6]
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	4611      	mov	r1, r2
 8001224:	4a10      	ldr	r2, [pc, #64]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001226:	430b      	orrs	r3, r1
 8001228:	6153      	str	r3, [r2, #20]
						break;
 800122a:	e017      	b.n	800125c <AFIO_voidsetEXTIAltFunc+0x278>
		case 	PORTC:	AFIO->EXTICR4&=~((0b00001111)<<(pin*4)); // CLR 4 bit .... these 4 bits shifted left by PIN index
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	79ba      	ldrb	r2, [r7, #6]
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	210f      	movs	r1, #15
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	43d2      	mvns	r2, r2
 800123c:	4611      	mov	r1, r2
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001240:	400b      	ands	r3, r1
 8001242:	6153      	str	r3, [r2, #20]
						AFIO->EXTICR4|=((0b00000010)<<(pin*4));	 // write in these 4 bits the value of PORTC which is = 0b0010
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	79ba      	ldrb	r2, [r7, #6]
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	2102      	movs	r1, #2
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	4611      	mov	r1, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <AFIO_voidsetEXTIAltFunc+0x284>)
 8001256:	430b      	orrs	r3, r1
 8001258:	6153      	str	r3, [r2, #20]
						break;
 800125a:	bf00      	nop
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40010000 	.word	0x40010000

0800126c <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	460b      	mov	r3, r1
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b02      	cmp	r3, #2
 8001282:	f200 80b2 	bhi.w	80013ea <DIO_voidSetPinDirection+0x17e>
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	f200 80ae 	bhi.w	80013ea <DIO_voidSetPinDirection+0x17e>
	{
		if(pin<8)	/*		Low	(PIN0:PIN7) CRL	*/
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	2b07      	cmp	r3, #7
 8001292:	d852      	bhi.n	800133a <DIO_voidSetPinDirection+0xce>
		{
			switch(port)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d037      	beq.n	800130a <DIO_voidSetPinDirection+0x9e>
 800129a:	2b02      	cmp	r3, #2
 800129c:	f300 80a5 	bgt.w	80013ea <DIO_voidSetPinDirection+0x17e>
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <DIO_voidSetPinDirection+0x3e>
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d018      	beq.n	80012da <DIO_voidSetPinDirection+0x6e>
				break;
			}

		}
	}else{/*	Return Error	*/}
}
 80012a8:	e09f      	b.n	80013ea <DIO_voidSetPinDirection+0x17e>
				GPIOA->CRL &= ~((0b1111)<<(pin * 4));
 80012aa:	4b52      	ldr	r3, [pc, #328]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	79ba      	ldrb	r2, [r7, #6]
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	210f      	movs	r1, #15
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	4611      	mov	r1, r2
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 80012be:	400b      	ands	r3, r1
 80012c0:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |=  ((Direction)<<(pin * 4));
 80012c2:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	7979      	ldrb	r1, [r7, #5]
 80012c8:	79ba      	ldrb	r2, [r7, #6]
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4611      	mov	r1, r2
 80012d2:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6013      	str	r3, [r2, #0]
				break;
 80012d8:	e087      	b.n	80013ea <DIO_voidSetPinDirection+0x17e>
				GPIOB->CRL &= ~((0b1111)<<(pin * 4));
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	79ba      	ldrb	r2, [r7, #6]
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	210f      	movs	r1, #15
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	4611      	mov	r1, r2
 80012ec:	4a42      	ldr	r2, [pc, #264]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 80012ee:	400b      	ands	r3, r1
 80012f0:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |=  ((Direction)<<(pin * 4));
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7979      	ldrb	r1, [r7, #5]
 80012f8:	79ba      	ldrb	r2, [r7, #6]
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4611      	mov	r1, r2
 8001302:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 8001304:	430b      	orrs	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
				break;
 8001308:	e06f      	b.n	80013ea <DIO_voidSetPinDirection+0x17e>
				GPIOC->CRL &= ~((0b1111)<<(pin * 4));
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	210f      	movs	r1, #15
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	43d2      	mvns	r2, r2
 800131a:	4611      	mov	r1, r2
 800131c:	4a37      	ldr	r2, [pc, #220]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 800131e:	400b      	ands	r3, r1
 8001320:	6013      	str	r3, [r2, #0]
				GPIOC->CRL |=  ((Direction)<<(pin * 4));
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	7979      	ldrb	r1, [r7, #5]
 8001328:	79ba      	ldrb	r2, [r7, #6]
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	fa01 f202 	lsl.w	r2, r1, r2
 8001330:	4611      	mov	r1, r2
 8001332:	4a32      	ldr	r2, [pc, #200]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 8001334:	430b      	orrs	r3, r1
 8001336:	6013      	str	r3, [r2, #0]
				break;
 8001338:	e057      	b.n	80013ea <DIO_voidSetPinDirection+0x17e>
		}else if(pin<16)	/*		Low	(PIN8:PIN15) CRL	*/
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d854      	bhi.n	80013ea <DIO_voidSetPinDirection+0x17e>
			pin -= 8;
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	3b08      	subs	r3, #8
 8001344:	71bb      	strb	r3, [r7, #6]
			switch(port)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d036      	beq.n	80013ba <DIO_voidSetPinDirection+0x14e>
 800134c:	2b02      	cmp	r3, #2
 800134e:	dc4c      	bgt.n	80013ea <DIO_voidSetPinDirection+0x17e>
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <DIO_voidSetPinDirection+0xee>
 8001354:	2b01      	cmp	r3, #1
 8001356:	d018      	beq.n	800138a <DIO_voidSetPinDirection+0x11e>
}
 8001358:	e047      	b.n	80013ea <DIO_voidSetPinDirection+0x17e>
				GPIOA->CRH &= ~((0b1111)<<(pin * 4));
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	79ba      	ldrb	r2, [r7, #6]
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	210f      	movs	r1, #15
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	43d2      	mvns	r2, r2
 800136a:	4611      	mov	r1, r2
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 800136e:	400b      	ands	r3, r1
 8001370:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |=  ((Direction)<<(pin * 4));
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	7979      	ldrb	r1, [r7, #5]
 8001378:	79ba      	ldrb	r2, [r7, #6]
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	4611      	mov	r1, r2
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <DIO_voidSetPinDirection+0x188>)
 8001384:	430b      	orrs	r3, r1
 8001386:	6053      	str	r3, [r2, #4]
				break;
 8001388:	e02f      	b.n	80013ea <DIO_voidSetPinDirection+0x17e>
				GPIOB->CRH &= ~((0b1111)<<(pin * 4));
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	79ba      	ldrb	r2, [r7, #6]
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	210f      	movs	r1, #15
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	43d2      	mvns	r2, r2
 800139a:	4611      	mov	r1, r2
 800139c:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 800139e:	400b      	ands	r3, r1
 80013a0:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |=  ((Direction)<<(pin * 4));
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	7979      	ldrb	r1, [r7, #5]
 80013a8:	79ba      	ldrb	r2, [r7, #6]
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	fa01 f202 	lsl.w	r2, r1, r2
 80013b0:	4611      	mov	r1, r2
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <DIO_voidSetPinDirection+0x18c>)
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6053      	str	r3, [r2, #4]
				break;
 80013b8:	e017      	b.n	80013ea <DIO_voidSetPinDirection+0x17e>
				GPIOC->CRH &= ~((0b1111)<<(pin * 4));
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	79ba      	ldrb	r2, [r7, #6]
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	210f      	movs	r1, #15
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	43d2      	mvns	r2, r2
 80013ca:	4611      	mov	r1, r2
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 80013ce:	400b      	ands	r3, r1
 80013d0:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |=  ((Direction)<<(pin * 4));
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	7979      	ldrb	r1, [r7, #5]
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	4611      	mov	r1, r2
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <DIO_voidSetPinDirection+0x190>)
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6053      	str	r3, [r2, #4]
				break;
 80013e8:	bf00      	nop
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000

08001400 <DIO_voidSetPinValue>:
void	DIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	460b      	mov	r3, r1
 800140c:	71bb      	strb	r3, [r7, #6]
 800140e:	4613      	mov	r3, r2
 8001410:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d840      	bhi.n	800149a <DIO_voidSetPinValue+0x9a>
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d83d      	bhi.n	800149a <DIO_voidSetPinValue+0x9a>
	{
		if(Value == GPIO_HIGH)
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d11b      	bne.n	800145c <DIO_voidSetPinValue+0x5c>
		{
			switch(port)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d012      	beq.n	8001450 <DIO_voidSetPinValue+0x50>
 800142a:	2b02      	cmp	r3, #2
 800142c:	dc35      	bgt.n	800149a <DIO_voidSetPinValue+0x9a>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <DIO_voidSetPinValue+0x38>
 8001432:	2b01      	cmp	r3, #1
 8001434:	d006      	beq.n	8001444 <DIO_voidSetPinValue+0x44>
			}			
		}
		
	}else{/*	Return Error	*/}
	
}
 8001436:	e030      	b.n	800149a <DIO_voidSetPinValue+0x9a>
				case	PORTA	:	GPIOA_set_pin;		break;
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	2201      	movs	r2, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <DIO_voidSetPinValue+0xa4>)
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	e02a      	b.n	800149a <DIO_voidSetPinValue+0x9a>
				case	PORTB	:	GPIOB_set_pin;		break;
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	2201      	movs	r2, #1
 8001448:	409a      	lsls	r2, r3
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <DIO_voidSetPinValue+0xa8>)
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	e024      	b.n	800149a <DIO_voidSetPinValue+0x9a>
				case	PORTC	:	GPIOC_set_pin;		break;
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	2201      	movs	r2, #1
 8001454:	409a      	lsls	r2, r3
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <DIO_voidSetPinValue+0xac>)
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	e01e      	b.n	800149a <DIO_voidSetPinValue+0x9a>
		else if(Value == GPIO_LOW)
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d11b      	bne.n	800149a <DIO_voidSetPinValue+0x9a>
			switch(port)
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d012      	beq.n	800148e <DIO_voidSetPinValue+0x8e>
 8001468:	2b02      	cmp	r3, #2
 800146a:	dc16      	bgt.n	800149a <DIO_voidSetPinValue+0x9a>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <DIO_voidSetPinValue+0x76>
 8001470:	2b01      	cmp	r3, #1
 8001472:	d006      	beq.n	8001482 <DIO_voidSetPinValue+0x82>
}
 8001474:	e011      	b.n	800149a <DIO_voidSetPinValue+0x9a>
				case	PORTA	:	GPIOA_clr_pin;		break;
 8001476:	79bb      	ldrb	r3, [r7, #6]
 8001478:	2201      	movs	r2, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <DIO_voidSetPinValue+0xa4>)
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	e00b      	b.n	800149a <DIO_voidSetPinValue+0x9a>
				case	PORTB	:	GPIOB_clr_pin;		break;
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	2201      	movs	r2, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <DIO_voidSetPinValue+0xa8>)
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	e005      	b.n	800149a <DIO_voidSetPinValue+0x9a>
				case	PORTC	:	GPIOC_clr_pin;		break;
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2201      	movs	r2, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <DIO_voidSetPinValue+0xac>)
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	bf00      	nop
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40011000 	.word	0x40011000

080014b0 <DIO_u8GetPinValue>:
u8		DIO_u8GetPinValue(u8 port, u8 pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	4613      	mov	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
	/*		Range Check 		*/
	u8	Local_u8Val = 0x99;
 80014c0:	2399      	movs	r3, #153	; 0x99
 80014c2:	73fb      	strb	r3, [r7, #15]
	if(port < 3 && pin < 16)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d82a      	bhi.n	8001520 <DIO_u8GetPinValue+0x70>
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d827      	bhi.n	8001520 <DIO_u8GetPinValue+0x70>
	{

			switch(port)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d01a      	beq.n	800150c <DIO_u8GetPinValue+0x5c>
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	dc22      	bgt.n	8001520 <DIO_u8GetPinValue+0x70>
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <DIO_u8GetPinValue+0x34>
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d00a      	beq.n	80014f8 <DIO_u8GetPinValue+0x48>
 80014e2:	e01d      	b.n	8001520 <DIO_u8GetPinValue+0x70>
			{
				case	PORTA	:	Local_u8Val	=	get_bit(GPIOA->IDR,pin);	break;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <DIO_u8GetPinValue+0x7c>)
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e013      	b.n	8001520 <DIO_u8GetPinValue+0x70>
				case	PORTB	:	Local_u8Val	=	get_bit(GPIOB->IDR,pin);	break;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <DIO_u8GetPinValue+0x80>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e009      	b.n	8001520 <DIO_u8GetPinValue+0x70>
				case	PORTC	:	Local_u8Val	=	get_bit(GPIOC->IDR,pin);	break;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <DIO_u8GetPinValue+0x84>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	bf00      	nop
			}
	}else{/*	Return Error	*/}	
	return Local_u8Val;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40010800 	.word	0x40010800
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40011000 	.word	0x40011000

08001538 <EXTI_voidEnableInt>:




void		EXTI_voidEnableInt(u8 line_num)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	set_bit(EXTI -> IMR,line_num);
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <EXTI_voidEnableInt+0x28>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	4611      	mov	r1, r2
 8001550:	4a03      	ldr	r2, [pc, #12]	; (8001560 <EXTI_voidEnableInt+0x28>)
 8001552:	430b      	orrs	r3, r1
 8001554:	6013      	str	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40010400 	.word	0x40010400

08001564 <EXTI_voidChangeSenseMode>:
}



void		EXTI_voidChangeSenseMode(u8 line_num, u8 Sense_Mode)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
	switch(Sense_Mode)
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d006      	beq.n	8001588 <EXTI_voidChangeSenseMode+0x24>
 800157a:	2b02      	cmp	r3, #2
 800157c:	dc45      	bgt.n	800160a <EXTI_voidChangeSenseMode+0xa6>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02e      	beq.n	80015e0 <EXTI_voidChangeSenseMode+0x7c>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d016      	beq.n	80015b4 <EXTI_voidChangeSenseMode+0x50>
 8001586:	e040      	b.n	800160a <EXTI_voidChangeSenseMode+0xa6>
	{
		case	RISING_EDGE		:	set_bit(EXTI -> RTSR,line_num);
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	79fa      	ldrb	r2, [r7, #7]
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f202 	lsl.w	r2, r1, r2
 8001594:	4611      	mov	r1, r2
 8001596:	4a24      	ldr	r2, [pc, #144]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 8001598:	430b      	orrs	r3, r1
 800159a:	6093      	str	r3, [r2, #8]
									clr_bit(EXTI -> FTSR,line_num);		break;
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	79fa      	ldrb	r2, [r7, #7]
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	4611      	mov	r1, r2
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	60d3      	str	r3, [r2, #12]
 80015b2:	e02a      	b.n	800160a <EXTI_voidChangeSenseMode+0xa6>
		case	FALLING_EDGE	:	set_bit(EXTI -> FTSR,line_num);
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	4611      	mov	r1, r2
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015c4:	430b      	orrs	r3, r1
 80015c6:	60d3      	str	r3, [r2, #12]
									clr_bit(EXTI -> RTSR,line_num);		break;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	43d2      	mvns	r2, r2
 80015d6:	4611      	mov	r1, r2
 80015d8:	4a13      	ldr	r2, [pc, #76]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015da:	400b      	ands	r3, r1
 80015dc:	6093      	str	r3, [r2, #8]
 80015de:	e014      	b.n	800160a <EXTI_voidChangeSenseMode+0xa6>
		case	IOC				:	set_bit(EXTI -> RTSR,line_num);
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4611      	mov	r1, r2
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6093      	str	r3, [r2, #8]
									set_bit(EXTI -> FTSR,line_num);		break;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	4611      	mov	r1, r2
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]
 8001608:	bf00      	nop
	}
	set_bit(EXTI -> IMR,line_num);
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	79fa      	ldrb	r2, [r7, #7]
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4a03      	ldr	r2, [pc, #12]	; (8001628 <EXTI_voidChangeSenseMode+0xc4>)
 800161a:	430b      	orrs	r3, r1
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40010400 	.word	0x40010400

0800162c <EXTI_voidSetCallBack>:



void		EXTI_voidSetCallBack(void (*Fptr)(void), u8 line_num)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
	if(Fptr != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <EXTI_voidSetCallBack+0x1c>
	{

		EXTI_CallBack[line_num] = Fptr;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	4904      	ldr	r1, [pc, #16]	; (8001654 <EXTI_voidSetCallBack+0x28>)
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000008c 	.word	0x2000008c

08001658 <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI0] != NULL)
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <EXTI0_IRQHandler+0x24>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <EXTI0_IRQHandler+0x12>
	 {
		 EXTI_CallBack[EXTI0]();
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <EXTI0_IRQHandler+0x24>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4798      	blx	r3
	 }
	set_bit(EXTI -> PR, EXTI0);
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <EXTI0_IRQHandler+0x28>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <EXTI0_IRQHandler+0x28>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6153      	str	r3, [r2, #20]
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000008c 	.word	0x2000008c
 8001680:	40010400 	.word	0x40010400

08001684 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI1] != NULL)
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <EXTI1_IRQHandler+0x24>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <EXTI1_IRQHandler+0x12>
	 {
		 EXTI_CallBack[EXTI1]();
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <EXTI1_IRQHandler+0x24>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4798      	blx	r3
	 }
	set_bit(EXTI -> PR, EXTI1);
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <EXTI1_IRQHandler+0x28>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <EXTI1_IRQHandler+0x28>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6153      	str	r3, [r2, #20]
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000008c 	.word	0x2000008c
 80016ac:	40010400 	.word	0x40010400

080016b0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI2] != NULL)
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <EXTI2_IRQHandler+0x24>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <EXTI2_IRQHandler+0x12>
	 {
		 EXTI_CallBack[EXTI2]();
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <EXTI2_IRQHandler+0x24>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4798      	blx	r3
	 }
	set_bit(EXTI -> PR, EXTI2);
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <EXTI2_IRQHandler+0x28>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <EXTI2_IRQHandler+0x28>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6153      	str	r3, [r2, #20]
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000008c 	.word	0x2000008c
 80016d8:	40010400 	.word	0x40010400

080016dc <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI3] != NULL)
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <EXTI3_IRQHandler+0x24>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <EXTI3_IRQHandler+0x12>
	 {
		 EXTI_CallBack[EXTI3]();
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <EXTI3_IRQHandler+0x24>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4798      	blx	r3
	 }
	set_bit(EXTI -> PR, EXTI3);
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <EXTI3_IRQHandler+0x28>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <EXTI3_IRQHandler+0x28>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6153      	str	r3, [r2, #20]
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000008c 	.word	0x2000008c
 8001704:	40010400 	.word	0x40010400

08001708 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[EXTI5] != NULL)
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <EXTI9_5_IRQHandler+0x1e>
	 {
		 EXTI_CallBack[EXTI5]();
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	4798      	blx	r3
		 set_bit(EXTI -> PR, EXTI5);
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 8001720:	f043 0320 	orr.w	r3, r3, #32
 8001724:	6153      	str	r3, [r2, #20]
	 }
	 if(EXTI_CallBack[EXTI6] != NULL)
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <EXTI9_5_IRQHandler+0x38>
	 {
		 EXTI_CallBack[EXTI6]();
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4798      	blx	r3
		 set_bit(EXTI -> PR, EXTI6);
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 800173a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173e:	6153      	str	r3, [r2, #20]
	 }
	 if(EXTI_CallBack[EXTI7] != NULL)
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <EXTI9_5_IRQHandler+0x52>
	 {
		 EXTI_CallBack[EXTI7]();
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	4798      	blx	r3
		 set_bit(EXTI -> PR, EXTI7);
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6153      	str	r3, [r2, #20]
	 }
	 if(EXTI_CallBack[EXTI8] != NULL)
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <EXTI9_5_IRQHandler+0x6c>
	 {
	 	 EXTI_CallBack[EXTI8]();
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4798      	blx	r3
	 	 set_bit(EXTI -> PR, EXTI8);
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	6153      	str	r3, [r2, #20]
	  }
	 if(EXTI_CallBack[EXTI9] != NULL)
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <EXTI9_5_IRQHandler+0x86>
	 {
		 EXTI_CallBack[EXTI9]();
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <EXTI9_5_IRQHandler+0x8c>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	4798      	blx	r3
		 set_bit(EXTI -> PR, EXTI9);
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <EXTI9_5_IRQHandler+0x90>)
 8001788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178c:	6153      	str	r3, [r2, #20]
	 }

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000008c 	.word	0x2000008c
 8001798:	40010400 	.word	0x40010400

0800179c <_delay_ms>:
extern u16 soilpotassium 		;


// simple busy wait function
void	_delay_ms(u32 ticks)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks * 500) ; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e003      	b.n	80017b2 <_delay_ms+0x16>
	{
		asm("NOP");
 80017aa:	bf00      	nop
	for( i = 0; i < (ticks * 500) ; i++)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3f3      	bcc.n	80017aa <_delay_ms+0xe>
	}
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
	...

080017d0 <GSM_voidConnectToNetwork>:
 * Returns:- 			Void
 * Description:-
 * 		connect GSM to network and initialize HTTP mode
 */
void GSM_voidConnectToNetwork (void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	// send AT to make GSM ready to start and sync with boud rate
	USART3_voidSendString("AT");
 80017d4:	483a      	ldr	r0, [pc, #232]	; (80018c0 <GSM_voidConnectToNetwork+0xf0>)
 80017d6:	f000 fd89 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 80017da:	483a      	ldr	r0, [pc, #232]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 80017dc:	f000 fd86 	bl	80022ec <USART3_voidSendString>
	_delay_ms(100);
 80017e0:	2064      	movs	r0, #100	; 0x64
 80017e2:	f7ff ffdb 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT");
 80017e6:	4836      	ldr	r0, [pc, #216]	; (80018c0 <GSM_voidConnectToNetwork+0xf0>)
 80017e8:	f000 fd80 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 80017ec:	4835      	ldr	r0, [pc, #212]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 80017ee:	f000 fd7d 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 80017f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f6:	f7ff ffd1 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+CPIN?");
 80017fa:	4833      	ldr	r0, [pc, #204]	; (80018c8 <GSM_voidConnectToNetwork+0xf8>)
 80017fc:	f000 fd76 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 8001800:	4830      	ldr	r0, [pc, #192]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 8001802:	f000 fd73 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 8001806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180a:	f7ff ffc7 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+CFUN=1");
 800180e:	482f      	ldr	r0, [pc, #188]	; (80018cc <GSM_voidConnectToNetwork+0xfc>)
 8001810:	f000 fd6c 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 8001814:	482b      	ldr	r0, [pc, #172]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 8001816:	f000 fd69 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 800181a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181e:	f7ff ffbd 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+CREG?");
 8001822:	482b      	ldr	r0, [pc, #172]	; (80018d0 <GSM_voidConnectToNetwork+0x100>)
 8001824:	f000 fd62 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 8001828:	4826      	ldr	r0, [pc, #152]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 800182a:	f000 fd5f 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 800182e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001832:	f7ff ffb3 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+CGATT?");
 8001836:	4827      	ldr	r0, [pc, #156]	; (80018d4 <GSM_voidConnectToNetwork+0x104>)
 8001838:	f000 fd58 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 800183c:	4821      	ldr	r0, [pc, #132]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 800183e:	f000 fd55 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 8001842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001846:	f7ff ffa9 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"");
 800184a:	4823      	ldr	r0, [pc, #140]	; (80018d8 <GSM_voidConnectToNetwork+0x108>)
 800184c:	f000 fd4e 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 8001852:	f000 fd4b 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 8001856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185a:	f7ff ff9f 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+SAPBR=3,1,\"APN\",\"internet.vodafone.net\"");
 800185e:	481f      	ldr	r0, [pc, #124]	; (80018dc <GSM_voidConnectToNetwork+0x10c>)
 8001860:	f000 fd44 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 8001864:	4817      	ldr	r0, [pc, #92]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 8001866:	f000 fd41 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 800186a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800186e:	f7ff ff95 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+SAPBR=3,1,\"USER\",\"internet\"");
 8001872:	481b      	ldr	r0, [pc, #108]	; (80018e0 <GSM_voidConnectToNetwork+0x110>)
 8001874:	f000 fd3a 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 8001878:	4812      	ldr	r0, [pc, #72]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 800187a:	f000 fd37 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1500);
 800187e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001882:	f7ff ff8b 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+SAPBR=1,1");
 8001886:	4817      	ldr	r0, [pc, #92]	; (80018e4 <GSM_voidConnectToNetwork+0x114>)
 8001888:	f000 fd30 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 800188e:	f000 fd2d 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1000);
 8001892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001896:	f7ff ff81 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+SAPBR=2,1");
 800189a:	4813      	ldr	r0, [pc, #76]	; (80018e8 <GSM_voidConnectToNetwork+0x118>)
 800189c:	f000 fd26 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 80018a0:	4808      	ldr	r0, [pc, #32]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 80018a2:	f000 fd23 	bl	80022ec <USART3_voidSendString>
	_delay_ms(1500);
 80018a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80018aa:	f7ff ff77 	bl	800179c <_delay_ms>
	USART3_voidSendString("AT+HTTPINIT");
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <GSM_voidConnectToNetwork+0x11c>)
 80018b0:	f000 fd1c 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <GSM_voidConnectToNetwork+0xf4>)
 80018b6:	f000 fd19 	bl	80022ec <USART3_voidSendString>

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	08003590 	.word	0x08003590
 80018c4:	08003594 	.word	0x08003594
 80018c8:	08003598 	.word	0x08003598
 80018cc:	080035a4 	.word	0x080035a4
 80018d0:	080035b0 	.word	0x080035b0
 80018d4:	080035bc 	.word	0x080035bc
 80018d8:	080035c8 	.word	0x080035c8
 80018dc:	080035e8 	.word	0x080035e8
 80018e0:	08003614 	.word	0x08003614
 80018e4:	08003634 	.word	0x08003634
 80018e8:	08003644 	.word	0x08003644
 80018ec:	08003654 	.word	0x08003654

080018f0 <GSM_voidSendData>:
 * Returns:- 			Void
 * Description:-
 * 		update data to google sheet
 */
void GSM_voidSendData(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	// enable HTTPSSL
	USART3_voidSendString("AT+HTTPSSL=1");
 80018f4:	484a      	ldr	r0, [pc, #296]	; (8001a20 <GSM_voidSendData+0x130>)
 80018f6:	f000 fcf9 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 80018fa:	484a      	ldr	r0, [pc, #296]	; (8001a24 <GSM_voidSendData+0x134>)
 80018fc:	f000 fcf6 	bl	80022ec <USART3_voidSendString>
	_delay_ms(500);
 8001900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001904:	f7ff ff4a 	bl	800179c <_delay_ms>

	// Send google sheet script link
	USART3_voidSendString("AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyiUN1bmSNm345frzKFq8PqFyeCMFSN9RfPf0dQ0b-GIZpI2YYp2j5B7hdfIjlw0NXU/exec?");
 8001908:	4847      	ldr	r0, [pc, #284]	; (8001a28 <GSM_voidSendData+0x138>)
 800190a:	f000 fcef 	bl	80022ec <USART3_voidSendString>

	// scaleID= is the first macro then send its value as string
	USART3_voidSendString("soilHumidity=");
 800190e:	4847      	ldr	r0, [pc, #284]	; (8001a2c <GSM_voidSendData+0x13c>)
 8001910:	f000 fcec 	bl	80022ec <USART3_voidSendString>
	ftoa(soilHumidity, ftoa_Result, 2);
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <GSM_voidSendData+0x140>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2202      	movs	r2, #2
 800191a:	4946      	ldr	r1, [pc, #280]	; (8001a34 <GSM_voidSendData+0x144>)
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f927 	bl	8001b70 <ftoa>
	USART3_voidSendString(ftoa_Result);
 8001922:	4844      	ldr	r0, [pc, #272]	; (8001a34 <GSM_voidSendData+0x144>)
 8001924:	f000 fce2 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&soilTemperature=");
 8001928:	4843      	ldr	r0, [pc, #268]	; (8001a38 <GSM_voidSendData+0x148>)
 800192a:	f000 fcdf 	bl	80022ec <USART3_voidSendString>
	ftoa(soilTemperature, ftoa_Result, 2);
 800192e:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <GSM_voidSendData+0x14c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2202      	movs	r2, #2
 8001934:	493f      	ldr	r1, [pc, #252]	; (8001a34 <GSM_voidSendData+0x144>)
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f91a 	bl	8001b70 <ftoa>
	USART3_voidSendString(ftoa_Result);
 800193c:	483d      	ldr	r0, [pc, #244]	; (8001a34 <GSM_voidSendData+0x144>)
 800193e:	f000 fcd5 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&soilConductivity=");
 8001942:	483f      	ldr	r0, [pc, #252]	; (8001a40 <GSM_voidSendData+0x150>)
 8001944:	f000 fcd2 	bl	80022ec <USART3_voidSendString>
	intToStr(soilConductivity, ftoa_Result, 3) ;
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <GSM_voidSendData+0x154>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	2203      	movs	r2, #3
 800194e:	4939      	ldr	r1, [pc, #228]	; (8001a34 <GSM_voidSendData+0x144>)
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f8c5 	bl	8001ae0 <intToStr>
	USART3_voidSendString(ftoa_Result);
 8001956:	4837      	ldr	r0, [pc, #220]	; (8001a34 <GSM_voidSendData+0x144>)
 8001958:	f000 fcc8 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&soilPH=");
 800195c:	483a      	ldr	r0, [pc, #232]	; (8001a48 <GSM_voidSendData+0x158>)
 800195e:	f000 fcc5 	bl	80022ec <USART3_voidSendString>
	ftoa(soilPH, ftoa_Result, 2);
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <GSM_voidSendData+0x15c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2202      	movs	r2, #2
 8001968:	4932      	ldr	r1, [pc, #200]	; (8001a34 <GSM_voidSendData+0x144>)
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f900 	bl	8001b70 <ftoa>
	USART3_voidSendString(ftoa_Result);
 8001970:	4830      	ldr	r0, [pc, #192]	; (8001a34 <GSM_voidSendData+0x144>)
 8001972:	f000 fcbb 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&soilNitrogen=");
 8001976:	4836      	ldr	r0, [pc, #216]	; (8001a50 <GSM_voidSendData+0x160>)
 8001978:	f000 fcb8 	bl	80022ec <USART3_voidSendString>
	intToStr(soilnitrogen, ftoa_Result, 2) ;
 800197c:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <GSM_voidSendData+0x164>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	492c      	ldr	r1, [pc, #176]	; (8001a34 <GSM_voidSendData+0x144>)
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f8ab 	bl	8001ae0 <intToStr>
	USART3_voidSendString(ftoa_Result);
 800198a:	482a      	ldr	r0, [pc, #168]	; (8001a34 <GSM_voidSendData+0x144>)
 800198c:	f000 fcae 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&soilPhosphorus=");
 8001990:	4831      	ldr	r0, [pc, #196]	; (8001a58 <GSM_voidSendData+0x168>)
 8001992:	f000 fcab 	bl	80022ec <USART3_voidSendString>
	intToStr(soilphosphorus, ftoa_Result, 2) ;
 8001996:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <GSM_voidSendData+0x16c>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2202      	movs	r2, #2
 800199c:	4925      	ldr	r1, [pc, #148]	; (8001a34 <GSM_voidSendData+0x144>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f89e 	bl	8001ae0 <intToStr>
	USART3_voidSendString(ftoa_Result);
 80019a4:	4823      	ldr	r0, [pc, #140]	; (8001a34 <GSM_voidSendData+0x144>)
 80019a6:	f000 fca1 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&soilPotassium=");
 80019aa:	482d      	ldr	r0, [pc, #180]	; (8001a60 <GSM_voidSendData+0x170>)
 80019ac:	f000 fc9e 	bl	80022ec <USART3_voidSendString>
	intToStr(soilpotassium, ftoa_Result, 2) ;
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <GSM_voidSendData+0x174>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	2202      	movs	r2, #2
 80019b6:	491f      	ldr	r1, [pc, #124]	; (8001a34 <GSM_voidSendData+0x144>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f891 	bl	8001ae0 <intToStr>
	USART3_voidSendString(ftoa_Result);
 80019be:	481d      	ldr	r0, [pc, #116]	; (8001a34 <GSM_voidSendData+0x144>)
 80019c0:	f000 fc94 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&airTemperature=");
 80019c4:	4828      	ldr	r0, [pc, #160]	; (8001a68 <GSM_voidSendData+0x178>)
 80019c6:	f000 fc91 	bl	80022ec <USART3_voidSendString>
	ftoa(SensorTempRead, ftoa_Result, 2) ;
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <GSM_voidSendData+0x17c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4918      	ldr	r1, [pc, #96]	; (8001a34 <GSM_voidSendData+0x144>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f8cc 	bl	8001b70 <ftoa>
	USART3_voidSendString(ftoa_Result);
 80019d8:	4816      	ldr	r0, [pc, #88]	; (8001a34 <GSM_voidSendData+0x144>)
 80019da:	f000 fc87 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("&airHumididty=");
 80019de:	4824      	ldr	r0, [pc, #144]	; (8001a70 <GSM_voidSendData+0x180>)
 80019e0:	f000 fc84 	bl	80022ec <USART3_voidSendString>
	ftoa(SensorHumdRead, ftoa_Result, 2) ;
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <GSM_voidSendData+0x184>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2202      	movs	r2, #2
 80019ea:	4912      	ldr	r1, [pc, #72]	; (8001a34 <GSM_voidSendData+0x144>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f8bf 	bl	8001b70 <ftoa>
	USART3_voidSendString(ftoa_Result);
 80019f2:	4810      	ldr	r0, [pc, #64]	; (8001a34 <GSM_voidSendData+0x144>)
 80019f4:	f000 fc7a 	bl	80022ec <USART3_voidSendString>

	USART3_voidSendString("\"\r\n");
 80019f8:	481f      	ldr	r0, [pc, #124]	; (8001a78 <GSM_voidSendData+0x188>)
 80019fa:	f000 fc77 	bl	80022ec <USART3_voidSendString>
	_delay_ms(3000);
 80019fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a02:	f7ff fecb 	bl	800179c <_delay_ms>

	USART3_voidSendString("AT+HTTPACTION=0");
 8001a06:	481d      	ldr	r0, [pc, #116]	; (8001a7c <GSM_voidSendData+0x18c>)
 8001a08:	f000 fc70 	bl	80022ec <USART3_voidSendString>
	USART3_voidSendString("\r\n");
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <GSM_voidSendData+0x134>)
 8001a0e:	f000 fc6d 	bl	80022ec <USART3_voidSendString>
	_delay_ms(3000);
 8001a12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a16:	f7ff fec1 	bl	800179c <_delay_ms>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	08003660 	.word	0x08003660
 8001a24:	08003594 	.word	0x08003594
 8001a28:	08003670 	.word	0x08003670
 8001a2c:	080036f8 	.word	0x080036f8
 8001a30:	200000dc 	.word	0x200000dc
 8001a34:	200000b4 	.word	0x200000b4
 8001a38:	08003708 	.word	0x08003708
 8001a3c:	200000e0 	.word	0x200000e0
 8001a40:	0800371c 	.word	0x0800371c
 8001a44:	200000e4 	.word	0x200000e4
 8001a48:	08003730 	.word	0x08003730
 8001a4c:	200000e8 	.word	0x200000e8
 8001a50:	0800373c 	.word	0x0800373c
 8001a54:	200000ec 	.word	0x200000ec
 8001a58:	0800374c 	.word	0x0800374c
 8001a5c:	200000ee 	.word	0x200000ee
 8001a60:	08003760 	.word	0x08003760
 8001a64:	200000f0 	.word	0x200000f0
 8001a68:	08003770 	.word	0x08003770
 8001a6c:	20000110 	.word	0x20000110
 8001a70:	08003784 	.word	0x08003784
 8001a74:	20000114 	.word	0x20000114
 8001a78:	08003794 	.word	0x08003794
 8001a7c:	08003798 	.word	0x08003798

08001a80 <reverse>:




void reverse(u8* str, u16 len)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
	// this func reverse the string
	int i = 0, j = len - 1, temp;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
	while (i < j) {
 8001a96:	e018      	b.n	8001aca <reverse+0x4a>
		temp = str[i];
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	440b      	add	r3, r1
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
		i++;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
		j--;
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]
	while (i < j) {
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbe2      	blt.n	8001a98 <reverse+0x18>
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <intToStr>:

u16  intToStr(u16 x, u8 str[], u16 d)
{// change int value to string of char
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	80fb      	strh	r3, [r7, #6]
 8001aec:	4613      	mov	r3, r2
 8001aee:	80bb      	strh	r3, [r7, #4]
	u16 i = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	81fb      	strh	r3, [r7, #14]
	while (x) {
 8001af4:	e01a      	b.n	8001b2c <intToStr+0x4c>
		str[i++] = (x % 10) + '0';
 8001af6:	88fa      	ldrh	r2, [r7, #6]
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <intToStr+0x8c>)
 8001afa:	fba3 1302 	umull	r1, r3, r3, r2
 8001afe:	08d9      	lsrs	r1, r3, #3
 8001b00:	460b      	mov	r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	81f9      	strh	r1, [r7, #14]
 8001b14:	4619      	mov	r1, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	440b      	add	r3, r1
 8001b1a:	3230      	adds	r2, #48	; 0x30
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <intToStr+0x8c>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	80fb      	strh	r3, [r7, #6]
	while (x) {
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1e1      	bne.n	8001af6 <intToStr+0x16>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 8001b32:	e007      	b.n	8001b44 <intToStr+0x64>
		str[i++] = '0';
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	81fa      	strh	r2, [r7, #14]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	2230      	movs	r2, #48	; 0x30
 8001b42:	701a      	strb	r2, [r3, #0]
	while (i < d)
 8001b44:	89fa      	ldrh	r2, [r7, #14]
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3f3      	bcc.n	8001b34 <intToStr+0x54>

	reverse(str, i);
 8001b4c:	89fb      	ldrh	r3, [r7, #14]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6838      	ldr	r0, [r7, #0]
 8001b52:	f7ff ff95 	bl	8001a80 <reverse>
	str[i] = '\0';
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
	return i;
 8001b60:	89fb      	ldrh	r3, [r7, #14]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	cccccccd 	.word	0xcccccccd

08001b70 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(f32 n, u8* res, u16 afterpoint)
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
	// Extract integer part
	u16 ipart = (u16)n;
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff fa10 	bl	8000fa4 <__aeabi_f2uiz>
 8001b84:	4603      	mov	r3, r0
 8001b86:	83fb      	strh	r3, [r7, #30]

	// Extract floating part
	f32 fpart = n - (f32)ipart;
 8001b88:	8bfb      	ldrh	r3, [r7, #30]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f862 	bl	8000c54 <__aeabi_ui2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4619      	mov	r1, r3
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7fe ffab 	bl	8000af0 <__aeabi_fsub>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]

	// convert integer part to string
	u16 i = intToStr(ipart, res, 0);
 8001b9e:	8bfb      	ldrh	r3, [r7, #30]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff9b 	bl	8001ae0 <intToStr>
 8001baa:	4603      	mov	r3, r0
 8001bac:	82fb      	strh	r3, [r7, #22]

	// check for display option after point
	if (afterpoint != 0) {
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d02f      	beq.n	8001c14 <ftoa+0xa4>
		res[i] = '.'; // add dot
 8001bb4:	8afb      	ldrh	r3, [r7, #22]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4413      	add	r3, r2
 8001bba:	222e      	movs	r2, #46	; 0x2e
 8001bbc:	701a      	strb	r2, [r3, #0]

		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 8001bbe:	69b8      	ldr	r0, [r7, #24]
 8001bc0:	f7fe fc3a 	bl	8000438 <__aeabi_f2d>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc12 	bl	80003f4 <__aeabi_ui2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	4910      	ldr	r1, [pc, #64]	; (8001c1c <ftoa+0xac>)
 8001bda:	f000 fdc1 	bl	8002760 <pow>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	f7fe fc7f 	bl	80004e8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ff29 	bl	8000a48 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	61bb      	str	r3, [r7, #24]

		intToStr((u16)fpart, res + i + 1, afterpoint);
 8001bfa:	69b8      	ldr	r0, [r7, #24]
 8001bfc:	f7ff f9d2 	bl	8000fa4 <__aeabi_f2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b298      	uxth	r0, r3
 8001c04:	8afb      	ldrh	r3, [r7, #22]
 8001c06:	3301      	adds	r3, #1
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff ff66 	bl	8001ae0 <intToStr>
	}
}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1c:	40240000 	.word	0x40240000

08001c20 <I2C_voidInit>:
 *      Author: SaadanyOmar
 */

#include "STD_TYPES.h"
#include "I2C_interface.h"
void I2C_voidInit(void){
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

	set_bit(I2C1->CR1,15);  //reset the I2c
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <I2C_voidInit+0x54>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <I2C_voidInit+0x54>)
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	6013      	str	r3, [r2, #0]
	clr_bit(I2C1->CR1,15);  // Normal operation
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <I2C_voidInit+0x54>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <I2C_voidInit+0x54>)
 8001c36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c3a:	6013      	str	r3, [r2, #0]


	// Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings
	set_bit(I2C1->CR2,3);// PCLK1 FREQUENCY in MHz = 0b00001000 ----> (8MHz)
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <I2C_voidInit+0x54>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <I2C_voidInit+0x54>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6053      	str	r3, [r2, #4]
	// Configure the clock control registers
	I2C1->CCR =(40<<0); // check calculation in PDF (0x28)
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <I2C_voidInit+0x54>)
 8001c4a:	2228      	movs	r2, #40	; 0x28
 8001c4c:	61da      	str	r2, [r3, #28]

	// Configure the rise time register
	I2C1->TRISE = 9;// check PDF
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <I2C_voidInit+0x54>)
 8001c50:	2209      	movs	r2, #9
 8001c52:	621a      	str	r2, [r3, #32]

	// Enable I2C
	set_bit(I2C1->CR1,0);
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <I2C_voidInit+0x54>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <I2C_voidInit+0x54>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]

	//Acknowledge enable
	set_bit(I2C1->CR1,10);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <I2C_voidInit+0x54>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <I2C_voidInit+0x54>)
 8001c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40005400 	.word	0x40005400

08001c78 <I2c_voidSendStartCondition>:

//01101000 11100100

void I2c_voidSendStartCondition(void){
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

	// Start generation
	do{
		set_bit(I2C1->CR1,8);
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <I2c_voidSendStartCondition+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <I2c_voidSendStartCondition+0x28>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]
	}
	while (!get_bit(I2C1->SR1,0));  // Wait for SB bit to set
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <I2c_voidSendStartCondition+0x28>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f3      	beq.n	8001c7c <I2c_voidSendStartCondition+0x4>
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40005400 	.word	0x40005400

08001ca4 <I2C_voidSendSlaveAddress>:


void I2C_voidSendSlaveAddress(u8 copy_Slaveaddress){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]

	do{I2C1->DR = copy_Slaveaddress;}  //  send the address
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <I2C_voidSendSlaveAddress+0x38>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	6113      	str	r3, [r2, #16]
	while (!get_bit(I2C1->SR1,1));  // wait for ADDR bit to set
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <I2C_voidSendSlaveAddress+0x38>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f6      	beq.n	8001cae <I2C_voidSendSlaveAddress+0xa>
	volatile u8 temp = I2C1->SR1 | I2C1->SR2;  // read SR1 and SR2 to clear the ADDR bit
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <I2C_voidSendSlaveAddress+0x38>)
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <I2C_voidSendSlaveAddress+0x38>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	73fb      	strb	r3, [r7, #15]

}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40005400 	.word	0x40005400

08001ce0 <I2C_voidMasterWriteDataByte>:
void I2C_voidMasterWriteDataByte(u8 copy_DataByte){
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
//	while (!get_bit(I2C1->SR1,7));  // wait for TXE bit to set
	I2C1->DR = copy_DataByte;
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <I2C_voidMasterWriteDataByte+0x2c>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	6113      	str	r3, [r2, #16]
	while (!get_bit(I2C1->SR1,2));  // wait for BTF bit to set
 8001cf0:	bf00      	nop
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <I2C_voidMasterWriteDataByte+0x2c>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f9      	beq.n	8001cf2 <I2C_voidMasterWriteDataByte+0x12>
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40005400 	.word	0x40005400

08001d10 <I2C_voidSendStopCondition>:
void I2C_voidSendStopCondition(void){
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	// stop generation
	set_bit(I2C1->CR1,9);
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <I2C_voidSendStopCondition+0x30>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <I2C_voidSendStopCondition+0x30>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	6013      	str	r3, [r2, #0]
	// reset sequence
	clr_bit(I2C1->CR1,0);  // disable I2c
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <I2C_voidSendStopCondition+0x30>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <I2C_voidSendStopCondition+0x30>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]
	set_bit(I2C1->CR1,0);  // enable I2C
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <I2C_voidSendStopCondition+0x30>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <I2C_voidSendStopCondition+0x30>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40005400 	.word	0x40005400

08001d44 <I2C_u8MasterReadDataByte>:
u8 I2C_u8MasterReadDataByte(void){
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

	while (!get_bit(I2C1->SR1,6));  // wait for Rx bit to set
 8001d48:	bf00      	nop
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <I2C_u8MasterReadDataByte+0x20>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f9      	beq.n	8001d4a <I2C_u8MasterReadDataByte+0x6>

	return I2C1 -> DR;
 8001d56:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <I2C_u8MasterReadDataByte+0x20>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	b2db      	uxtb	r3, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40005400 	.word	0x40005400

08001d68 <NVIC_voidInit>:




void		NVIC_voidInit()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
	#ifndef			SCB_AIRCR
		#define		SCB_BASE_ADD		(0xE000ED00)
		#define		SCB_AIRCR			*((u32 *)(SCB_BASE_ADD+0x0C))
	#endif

	SCB_AIRCR = NVIC_NUM_GRP_SUB;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <NVIC_voidInit+0x14>)
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <NVIC_voidInit+0x18>)
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed0c 	.word	0xe000ed0c
 8001d80:	05fa0500 	.word	0x05fa0500

08001d84 <NVIC_voidEnablePerInt>:



void		NVIC_voidEnablePerInt(u8 IntNum)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
	/*		Range Check			*/
	if(IntNum<32)
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b1f      	cmp	r3, #31
 8001d92:	d805      	bhi.n	8001da0 <NVIC_voidEnablePerInt+0x1c>
	{
		//SET_BIT(NVIC_ISER0,IntNum); Read Modify Write
		NVIC_ISER0 = (1 << IntNum) ; //write only
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2201      	movs	r2, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <NVIC_voidEnablePerInt+0x3c>)
 8001d9c:	601a      	str	r2, [r3, #0]
	{
		IntNum -= 32;
		NVIC_ISER1 = (1 << IntNum) ; //write only
	}

}
 8001d9e:	e00a      	b.n	8001db6 <NVIC_voidEnablePerInt+0x32>
	}else if(IntNum<64)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b3f      	cmp	r3, #63	; 0x3f
 8001da4:	d807      	bhi.n	8001db6 <NVIC_voidEnablePerInt+0x32>
		IntNum -= 32;
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	3b20      	subs	r3, #32
 8001daa:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << IntNum) ; //write only
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2201      	movs	r2, #1
 8001db0:	409a      	lsls	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <NVIC_voidEnablePerInt+0x40>)
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000e104 	.word	0xe000e104

08001dc8 <RCC_voidSysClkInt>:




void		RCC_voidSysClkInt(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
		if (HSE_CSS==CSS_ON)
		{
			set_bit(RCC->CR,19) 	;
		}
	#elif (sysClk==sysClk_HSI)															
		set_bit(RCC->CR,0)		;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6013      	str	r3, [r2, #0]
	while (get_bit(RCC->CR,1)!=1)
 8001dd8:	e005      	b.n	8001de6 <RCC_voidSysClkInt+0x1e>
		set_bit(RCC->CR,0) 	;
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a2e      	ldr	r2, [pc, #184]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6013      	str	r3, [r2, #0]
	while (get_bit(RCC->CR,1)!=1)
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	085b      	lsrs	r3, r3, #1
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d1f2      	bne.n	8001dda <RCC_voidSysClkInt+0x12>
		
		
		
		
	#if (sysClkSelect==sysClkSelect_HSE)
		set_bit(RCC->CFGR,0)	;
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6053      	str	r3, [r2, #4]
		clr_bit(RCC->CFGR,1)	;
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e06:	f023 0302 	bic.w	r3, r3, #2
 8001e0a:	6053      	str	r3, [r2, #4]
		
		
		
	
	#if (AHB_pre==SYSCLK_divided_1)		
		clr_bit(RCC->CFGR,7)	;
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e16:	6053      	str	r3, [r2, #4]
	#endif	
		
		
		
	#if (APB1_pre==HCLK_divided_1)
		clr_bit(RCC->CFGR,10);
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e22:	6053      	str	r3, [r2, #4]
		
	

	
	#if (APB2_pre==HCLK_divided_1)			
		clr_bit(RCC->CFGR,10);
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e2e:	6053      	str	r3, [r2, #4]
	


	
	#if (ADC_pre==PCLK2_divided_2)
		clr_bit(RCC->CFGR,14)	;
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e3a:	6053      	str	r3, [r2, #4]
		clr_bit(RCC->CFGR,15)	;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e46:	6053      	str	r3, [r2, #4]
	#endif
		
		
		
	#if (PLL_source==HSI_divided_2)
		clr_bit(RCC->CFGR,14)	;
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e52:	6053      	str	r3, [r2, #4]
	#endif
	

	
	#if (PLL_HSE_divided==HSE_NODivided)
		clr_bit(RCC->CFGR,14)	;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5e:	6053      	str	r3, [r2, #4]
	#endif
	

	
	#if(AHB_pre==PLL_input_x4)	
		clr_bit(RCC->CFGR,18)	;
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a0c      	ldr	r2, [pc, #48]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6053      	str	r3, [r2, #4]
		set_bit(RCC->CFGR,19)	;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e76:	6053      	str	r3, [r2, #4]
		clr_bit(RCC->CFGR,20)	;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e82:	6053      	str	r3, [r2, #4]
		clr_bit(RCC->CFGR,21)	;
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <RCC_voidSysClkInt+0xd0>)
 8001e8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e8e:	6053      	str	r3, [r2, #4]
		set_bit(RCC->CFGR,18)	;
		clr_bit(RCC->CFGR,19)	;
		set_bit(RCC->CFGR,20)	;
		set_bit(RCC->CFGR,21)	;
	#endif
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000

08001e9c <RCC_voidEnablePerClk>:




void		RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
	/*		Range Check							*/
	if(PerId < 32)
 8001eac:	79bb      	ldrb	r3, [r7, #6]
 8001eae:	2b1f      	cmp	r3, #31
 8001eb0:	d82a      	bhi.n	8001f08 <RCC_voidEnablePerClk+0x6c>
	{
		switch(BusId)
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d01c      	beq.n	8001ef2 <RCC_voidEnablePerClk+0x56>
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	dc25      	bgt.n	8001f08 <RCC_voidEnablePerClk+0x6c>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <RCC_voidEnablePerClk+0x2a>
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00b      	beq.n	8001edc <RCC_voidEnablePerClk+0x40>
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}
	
}
 8001ec4:	e020      	b.n	8001f08 <RCC_voidEnablePerClk+0x6c>
			case	RCC_AHB		:	set_bit(RCC->AHBENR	,PerId) ;	break;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <RCC_voidEnablePerClk+0x78>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	79ba      	ldrb	r2, [r7, #6]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <RCC_voidEnablePerClk+0x78>)
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	6153      	str	r3, [r2, #20]
 8001eda:	e015      	b.n	8001f08 <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB1	:	set_bit(RCC->APB1ENR,PerId)	;	break;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <RCC_voidEnablePerClk+0x78>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	79ba      	ldrb	r2, [r7, #6]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <RCC_voidEnablePerClk+0x78>)
 8001eec:	430b      	orrs	r3, r1
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	e00a      	b.n	8001f08 <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB2	:	set_bit(RCC->APB2ENR,PerId)	;	break;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <RCC_voidEnablePerClk+0x78>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	79ba      	ldrb	r2, [r7, #6]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	4611      	mov	r1, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <RCC_voidEnablePerClk+0x78>)
 8001f02:	430b      	orrs	r3, r1
 8001f04:	6193      	str	r3, [r2, #24]
 8001f06:	bf00      	nop
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <SHT_SensorInit>:
#include "SHT.h"
#include "DIO_interface.h"
#include "I2C_interface.h"

void SHT_SensorInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	DIO_voidSetPinDirection(PORTB, PIN6, GPIO_OUTPUT_10MHZ_AFOD);
 8001f1c:	220d      	movs	r2, #13
 8001f1e:	2106      	movs	r1, #6
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7ff f9a3 	bl	800126c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB, PIN7, GPIO_OUTPUT_10MHZ_AFOD);
 8001f26:	220d      	movs	r2, #13
 8001f28:	2107      	movs	r1, #7
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7ff f99e 	bl	800126c <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PORTB, PIN7, GPIO_LOW);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2107      	movs	r1, #7
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fa63 	bl	8001400 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB, PIN6, GPIO_LOW);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2106      	movs	r1, #6
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff fa5e 	bl	8001400 <DIO_voidSetPinValue>

	I2C_voidInit();
 8001f44:	f7ff fe6c 	bl	8001c20 <I2C_voidInit>
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	0000      	movs	r0, r0
	...

08001f50 <SHT_RecieveTemp>:


f32 SHT_RecieveTemp(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0

	f32 Local_var=0;
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
	u8 I2CData[3];

	I2c_voidSendStartCondition();
 8001f5c:	f7ff fe8c 	bl	8001c78 <I2c_voidSendStartCondition>
	I2C_voidSendSlaveAddress(0b10000000);
 8001f60:	2080      	movs	r0, #128	; 0x80
 8001f62:	f7ff fe9f 	bl	8001ca4 <I2C_voidSendSlaveAddress>
	I2C_voidMasterWriteDataByte(0b11100011);
 8001f66:	20e3      	movs	r0, #227	; 0xe3
 8001f68:	f7ff feba 	bl	8001ce0 <I2C_voidMasterWriteDataByte>
	I2C_voidSendStopCondition();
 8001f6c:	f7ff fed0 	bl	8001d10 <I2C_voidSendStopCondition>

	_delay_ms(500);
 8001f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f74:	f7ff fc12 	bl	800179c <_delay_ms>
	I2c_voidSendStartCondition();
 8001f78:	f7ff fe7e 	bl	8001c78 <I2c_voidSendStartCondition>
	I2C_voidSendSlaveAddress(0b10000001);
 8001f7c:	2081      	movs	r0, #129	; 0x81
 8001f7e:	f7ff fe91 	bl	8001ca4 <I2C_voidSendSlaveAddress>

	I2CData[0] = I2C_u8MasterReadDataByte();
 8001f82:	f7ff fedf 	bl	8001d44 <I2C_u8MasterReadDataByte>
 8001f86:	4603      	mov	r3, r0
 8001f88:	703b      	strb	r3, [r7, #0]
	I2CData[1] = I2C_u8MasterReadDataByte();
 8001f8a:	f7ff fedb 	bl	8001d44 <I2C_u8MasterReadDataByte>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	707b      	strb	r3, [r7, #1]
	I2CData[2] = I2C_u8MasterReadDataByte();
 8001f92:	f7ff fed7 	bl	8001d44 <I2C_u8MasterReadDataByte>
 8001f96:	4603      	mov	r3, r0
 8001f98:	70bb      	strb	r3, [r7, #2]
	I2C_voidSendStopCondition();
 8001f9a:	f7ff feb9 	bl	8001d10 <I2C_voidSendStopCondition>

	Local_var= (	(	( (I2CData[0]<<8)|(I2CData[1]) )	/	65536.000	)	*	175.72) - 46.85;
 8001f9e:	783b      	ldrb	r3, [r7, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	787a      	ldrb	r2, [r7, #1]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa34 	bl	8000414 <__aeabi_i2d>
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <SHT_RecieveTemp+0xb8>)
 8001fb2:	f7fe fbc3 	bl	800073c <__aeabi_ddiv>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	a30e      	add	r3, pc, #56	; (adr r3, 8001ff8 <SHT_RecieveTemp+0xa8>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fa90 	bl	80004e8 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	a30b      	add	r3, pc, #44	; (adr r3, 8002000 <SHT_RecieveTemp+0xb0>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe f8cf 	bl	8000178 <__aeabi_dsub>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fd31 	bl	8000a48 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	607b      	str	r3, [r7, #4]

	return Local_var;
 8001fea:	687b      	ldr	r3, [r7, #4]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	3d70a3d7 	.word	0x3d70a3d7
 8001ffc:	4065f70a 	.word	0x4065f70a
 8002000:	cccccccd 	.word	0xcccccccd
 8002004:	40476ccc 	.word	0x40476ccc
 8002008:	40f00000 	.word	0x40f00000

0800200c <SHT_RecieveHumd>:



f32 SHT_RecieveHumd(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	f32 Local_var=0;
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
	u8 I2CData[3];

	I2c_voidSendStartCondition();
 8002018:	f7ff fe2e 	bl	8001c78 <I2c_voidSendStartCondition>
	I2C_voidSendSlaveAddress(0b10000000);
 800201c:	2080      	movs	r0, #128	; 0x80
 800201e:	f7ff fe41 	bl	8001ca4 <I2C_voidSendSlaveAddress>
	I2C_voidMasterWriteDataByte(0b11100101);
 8002022:	20e5      	movs	r0, #229	; 0xe5
 8002024:	f7ff fe5c 	bl	8001ce0 <I2C_voidMasterWriteDataByte>
	I2C_voidSendStopCondition();
 8002028:	f7ff fe72 	bl	8001d10 <I2C_voidSendStopCondition>

	_delay_ms(500);
 800202c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002030:	f7ff fbb4 	bl	800179c <_delay_ms>
	I2c_voidSendStartCondition();
 8002034:	f7ff fe20 	bl	8001c78 <I2c_voidSendStartCondition>
	I2C_voidSendSlaveAddress(0b10000001);
 8002038:	2081      	movs	r0, #129	; 0x81
 800203a:	f7ff fe33 	bl	8001ca4 <I2C_voidSendSlaveAddress>

	I2CData[0] = I2C_u8MasterReadDataByte();
 800203e:	f7ff fe81 	bl	8001d44 <I2C_u8MasterReadDataByte>
 8002042:	4603      	mov	r3, r0
 8002044:	703b      	strb	r3, [r7, #0]
	I2CData[1] = I2C_u8MasterReadDataByte();
 8002046:	f7ff fe7d 	bl	8001d44 <I2C_u8MasterReadDataByte>
 800204a:	4603      	mov	r3, r0
 800204c:	707b      	strb	r3, [r7, #1]
	I2CData[2] = I2C_u8MasterReadDataByte();
 800204e:	f7ff fe79 	bl	8001d44 <I2C_u8MasterReadDataByte>
 8002052:	4603      	mov	r3, r0
 8002054:	70bb      	strb	r3, [r7, #2]
	I2C_voidSendStopCondition();
 8002056:	f7ff fe5b 	bl	8001d10 <I2C_voidSendStopCondition>

	Local_var= (	(	( (I2CData[0]<<8)|(I2CData[1]) )	/	65536.000	)	*	125) - 6;
 800205a:	783b      	ldrb	r3, [r7, #0]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	787a      	ldrb	r2, [r7, #1]
 8002060:	4313      	orrs	r3, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f9d6 	bl	8000414 <__aeabi_i2d>
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <SHT_RecieveHumd+0xa4>)
 800206e:	f7fe fb65 	bl	800073c <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <SHT_RecieveHumd+0xa8>)
 8002080:	f7fe fa32 	bl	80004e8 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <SHT_RecieveHumd+0xac>)
 8002092:	f7fe f871 	bl	8000178 <__aeabi_dsub>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fcd3 	bl	8000a48 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	607b      	str	r3, [r7, #4]

	return Local_var;
 80020a6:	687b      	ldr	r3, [r7, #4]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40f00000 	.word	0x40f00000
 80020b4:	405f4000 	.word	0x405f4000
 80020b8:	40180000 	.word	0x40180000

080020bc <SOIL_voidSensorReadData>:
 * I/O Parameters:-		void
 * Returns:- 			Void
 * Description:-
 * 		used to receive and update sensor variables
 */
void SOIL_voidSensorReadData(void){
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
	// send the request array
	for (u8 i =0 ; i<8; i++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	71fb      	strb	r3, [r7, #7]
 80020c6:	e008      	b.n	80020da <SOIL_voidSensorReadData+0x1e>
	{
		USART_voidSendByte(soilarr[i]);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4a48      	ldr	r2, [pc, #288]	; (80021ec <SOIL_voidSensorReadData+0x130>)
 80020cc:	5cd3      	ldrb	r3, [r2, r3]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f998 	bl	8002404 <USART_voidSendByte>
	for (u8 i =0 ; i<8; i++)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	3301      	adds	r3, #1
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b07      	cmp	r3, #7
 80020de:	d9f3      	bls.n	80020c8 <SOIL_voidSensorReadData+0xc>
	}
	//Receive 19 element of u8
	for (u8 i =0 ; i<19; i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	71bb      	strb	r3, [r7, #6]
 80020e4:	e009      	b.n	80020fa <SOIL_voidSensorReadData+0x3e>
	{
		soilrecive[i]=USART_u8ReciveData();
 80020e6:	79bc      	ldrb	r4, [r7, #6]
 80020e8:	f000 f9ac 	bl	8002444 <USART_u8ReciveData>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 80020f2:	551a      	strb	r2, [r3, r4]
	for (u8 i =0 ; i<19; i++)
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	3301      	adds	r3, #1
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	2b12      	cmp	r3, #18
 80020fe:	d9f2      	bls.n	80020e6 <SOIL_voidSensorReadData+0x2a>
	}

	soilHumidity 	  	= 	(soilrecive[3]  << 8) | soilrecive[4]; 	// soil Humidity value in element no. 3 and 4
 8002100:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 8002102:	78db      	ldrb	r3, [r3, #3]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	4a3a      	ldr	r2, [pc, #232]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 8002108:	7912      	ldrb	r2, [r2, #4]
 800210a:	4313      	orrs	r3, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fda5 	bl	8000c5c <__aeabi_i2f>
 8002112:	4603      	mov	r3, r0
 8002114:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <SOIL_voidSensorReadData+0x138>)
 8002116:	6013      	str	r3, [r2, #0]
	soilHumidity /= 10.0;											// divided this value by 10 to get the actual value (it will become float)
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <SOIL_voidSensorReadData+0x138>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4936      	ldr	r1, [pc, #216]	; (80021f8 <SOIL_voidSensorReadData+0x13c>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fea4 	bl	8000e6c <__aeabi_fdiv>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <SOIL_voidSensorReadData+0x138>)
 800212a:	601a      	str	r2, [r3, #0]


	soilTemperature  	= 	(soilrecive[5]  << 8) | soilrecive[6];	// soil Temperature  value in element no. 5 and 6
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 800212e:	795b      	ldrb	r3, [r3, #5]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 8002134:	7992      	ldrb	r2, [r2, #6]
 8002136:	4313      	orrs	r3, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fd8f 	bl	8000c5c <__aeabi_i2f>
 800213e:	4603      	mov	r3, r0
 8002140:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <SOIL_voidSensorReadData+0x140>)
 8002142:	6013      	str	r3, [r2, #0]
	soilTemperature /= 10.0;                                        // divided this value by 10 to get the actual value (it will become float)
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <SOIL_voidSensorReadData+0x140>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	492b      	ldr	r1, [pc, #172]	; (80021f8 <SOIL_voidSensorReadData+0x13c>)
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fe8e 	bl	8000e6c <__aeabi_fdiv>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <SOIL_voidSensorReadData+0x140>)
 8002156:	601a      	str	r2, [r3, #0]


	soilConductivity 	= 	(soilrecive[7]  << 8) | soilrecive[8];	// soil Conductivity value in element no. 7 and 8
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 800215a:	79db      	ldrb	r3, [r3, #7]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	b21a      	sxth	r2, r3
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 8002162:	7a1b      	ldrb	r3, [r3, #8]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21b      	sxth	r3, r3
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <SOIL_voidSensorReadData+0x144>)
 800216e:	801a      	strh	r2, [r3, #0]


	soilPH 				= 	(soilrecive[9]  << 8) | soilrecive[10];	// soil PH value in element no. 9 and 10
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 8002172:	7a5b      	ldrb	r3, [r3, #9]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 8002178:	7a92      	ldrb	r2, [r2, #10]
 800217a:	4313      	orrs	r3, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fd6d 	bl	8000c5c <__aeabi_i2f>
 8002182:	4603      	mov	r3, r0
 8002184:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <SOIL_voidSensorReadData+0x148>)
 8002186:	6013      	str	r3, [r2, #0]
	soilPH /= 10.0;                                                 // divided this value by 10 to get the actual value (it will become float)
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <SOIL_voidSensorReadData+0x148>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	491a      	ldr	r1, [pc, #104]	; (80021f8 <SOIL_voidSensorReadData+0x13c>)
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fe6c 	bl	8000e6c <__aeabi_fdiv>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <SOIL_voidSensorReadData+0x148>)
 800219a:	601a      	str	r2, [r3, #0]


	soilnitrogen 		= 	(soilrecive[11] << 8) | soilrecive[12]; // soil nitrogen value in element no. 11 and 12
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 800219e:	7adb      	ldrb	r3, [r3, #11]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 80021a6:	7b1b      	ldrb	r3, [r3, #12]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <SOIL_voidSensorReadData+0x14c>)
 80021b2:	801a      	strh	r2, [r3, #0]


	soilphosphorus 		= 	(soilrecive[13] << 8) | soilrecive[14]; // soil phosphorus value in element no. 13 and 14
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 80021b6:	7b5b      	ldrb	r3, [r3, #13]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 80021be:	7b9b      	ldrb	r3, [r3, #14]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <SOIL_voidSensorReadData+0x150>)
 80021ca:	801a      	strh	r2, [r3, #0]


	soilpotassium 		= 	(soilrecive[15] << 8) | soilrecive[16]; // soil potassium value in element no. 15 and 16
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 80021ce:	7bdb      	ldrb	r3, [r3, #15]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SOIL_voidSensorReadData+0x134>)
 80021d6:	7c1b      	ldrb	r3, [r3, #16]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21b      	sxth	r3, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <SOIL_voidSensorReadData+0x154>)
 80021e2:	801a      	strh	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	20000000 	.word	0x20000000
 80021f0:	200000c8 	.word	0x200000c8
 80021f4:	200000dc 	.word	0x200000dc
 80021f8:	41200000 	.word	0x41200000
 80021fc:	200000e0 	.word	0x200000e0
 8002200:	200000e4 	.word	0x200000e4
 8002204:	200000e8 	.word	0x200000e8
 8002208:	200000ec 	.word	0x200000ec
 800220c:	200000ee 	.word	0x200000ee
 8002210:	200000f0 	.word	0x200000f0

08002214 <USART3_voidInit>:
 * Description:-
 * 		initializes the USART peripheral. regarding these parameters
 * 		1-Parity	2- Parity Type 	3- Data lenght 	4-Stop Bits 	5-Baud rate
 */
void USART3_voidInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
	// The baud rate is determined by the value of the BaudRateUSART macro.
	// BRR value calculated regarding the datasheet
#if BaudRateUSART_3 == 115200
	USART3->BRR=USART3_BRRValue115200;
#elif BaudRateUSART_3 == 9600
	USART3->BRR=USART3_BRRValue9600;
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <USART3_voidInit+0x5c>)
 800221a:	f240 3241 	movw	r2, #833	; 0x341
 800221e:	609a      	str	r2, [r3, #8]
#elif BaudRateUSART_3 == 4800
	USART3->BRR=USART3_BRRValue4800;
#endif

		clr_bit(USART3->CR1,CR1_M); // clr M  to make word length for the USART to 8 bits
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <USART3_voidInit+0x5c>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a12      	ldr	r2, [pc, #72]	; (8002270 <USART3_voidInit+0x5c>)
 8002226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800222a:	60d3      	str	r3, [r2, #12]

		// this section enables or disables parity for the USART peripheral
#if ParityUSART_3 == EnableUSART_3
	set_bit(USART3->CR1, CR1_PCE);
#elif ParityUSART_3 == DisableUSART_3
	clr_bit(USART3->CR1, CR1_PCE);
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <USART3_voidInit+0x5c>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <USART3_voidInit+0x5c>)
 8002232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002236:	60d3      	str	r3, [r2, #12]

	// This section of code sets the parity type for the USART to be even or odd
#if ParityTypeUSART_3 == OddUSART_3
	set_bit(USART3->CR1, CR1_PS);
#elif ParityTypeUSART_3 == EvenUSART_3
	clr_bit(USART3->CR1, CR1_PS);
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <USART3_voidInit+0x5c>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <USART3_voidInit+0x5c>)
 800223e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002242:	60d3      	str	r3, [r2, #12]
#endif


	// This section of code sets the number of stop bits for the USART to be 1 or 2
#if StopBitsUSART_3 == OneStopBitUSART_3
	clr_bit(USART3->CR2, CR2_STOP0);
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <USART3_voidInit+0x5c>)
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <USART3_voidInit+0x5c>)
 800224a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800224e:	6113      	str	r3, [r2, #16]
	clr_bit(USART3->CR2, CR2_STOP1);
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <USART3_voidInit+0x5c>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <USART3_voidInit+0x5c>)
 8002256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800225a:	6113      	str	r3, [r2, #16]
	clr_bit(USART3->CR2, CR2_STOP0);
	set_bit(USART3->CR2, CR2_STOP1);
#endif

	// This line of code enables the USART peripheral.
	set_bit(USART3->CR1, CR1_UE);
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <USART3_voidInit+0x5c>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a03      	ldr	r2, [pc, #12]	; (8002270 <USART3_voidInit+0x5c>)
 8002262:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	40004800 	.word	0x40004800

08002274 <USART3_enableTX>:
 * I/O Parameters:-		Void
 * Returns:- 			Void
 * Description:-
 * 		enable transmitter
 */
void USART3_enableTX(void) {
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
	set_bit(USART3->CR1,CR1_TE); // set TE bit to enable transmitter
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <USART3_enableTX+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a03      	ldr	r2, [pc, #12]	; (800228c <USART3_enableTX+0x18>)
 800227e:	f043 0308 	orr.w	r3, r3, #8
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	40004800 	.word	0x40004800

08002290 <USART3_enableRX>:
 * I/O Parameters:-		Void
 * Returns:- 			Void
 * Description:-
 * 		enable receiver
 */
void USART3_enableRX(void) {
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
	set_bit(USART3->CR1,CR1_RE); // set RE bit to enable receiver
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <USART3_enableRX+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <USART3_enableRX+0x18>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	40004800 	.word	0x40004800

080022ac <USART3_voidSendByte>:
 * Returns:- 			Void
 * Description:-
 * 		this function use USART to send byte through it
 */
void USART3_voidSendByte(u8 ByteData)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
// waits for the USART transmit buffer to be empty
	while (!get_bit(USART3->SR,SR_TXE)){asm("NOP");}
 80022b6:	e000      	b.n	80022ba <USART3_voidSendByte+0xe>
 80022b8:	bf00      	nop
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <USART3_voidSendByte+0x3c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f8      	beq.n	80022b8 <USART3_voidSendByte+0xc>
// This line writes the byte of data to the USART data register.
	USART3->DR=ByteData;
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <USART3_voidSendByte+0x3c>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	6053      	str	r3, [r2, #4]
//	This while loop waits for the USART3 transmit complete flag to be set.
	while (!get_bit(USART3->SR,SR_TC)){asm("NOP");}
 80022cc:	e000      	b.n	80022d0 <USART3_voidSendByte+0x24>
 80022ce:	bf00      	nop
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <USART3_voidSendByte+0x3c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f8      	beq.n	80022ce <USART3_voidSendByte+0x22>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40004800 	.word	0x40004800

080022ec <USART3_voidSendString>:
 * 		(the end of any string marked by the null character \0).
 * 		For each character in the string,
 * 		the function calls the USART3_voidSendByte() to send the character over the USART peripheral.
 */
void USART3_voidSendString(u8 *  str)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	//The loop will continue to iterate while the character at the current position
	//in the string is not the null character \0
	while (*str != '\0'){
 80022f4:	e007      	b.n	8002306 <USART3_voidSendString+0x1a>
		//calls the USART3_voidSendByte() to send the char at the current position in the string
		USART3_voidSendByte(*str) ;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ffd6 	bl	80022ac <USART3_voidSendByte>
		//increments the pointer to the string,
		//so that the next iteration of the loop will look at the next character in the string.
		str ++ ;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3301      	adds	r3, #1
 8002304:	607b      	str	r3, [r7, #4]
	while (*str != '\0'){
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f3      	bne.n	80022f6 <USART3_voidSendString+0xa>
	}
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <USART3_u8ReciveData>:
 * Returns:- 			u8
 * Description:-
 * 		this function receives a byte of data from the USART peripheral and returns it.
 */
u8 USART3_u8ReciveData(void)
{	u8 USART3_Local_Data=0;
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	2300      	movs	r3, #0
 8002320:	717b      	strb	r3, [r7, #5]
	u16 TimeOUT=0;
 8002322:	2300      	movs	r3, #0
 8002324:	80fb      	strh	r3, [r7, #6]
//The SR_RXNE bit is the receive data ready bit.
//It is set when there is a byte of data available in the USART3 receive buffer.
//The loop will continue to iterate while the SR_RXNE bit is not set.
	while (!get_bit(USART3->SR,SR_RXNE) && TimeOUT<65000 ) {
 8002326:	e002      	b.n	800232e <USART3_u8ReciveData+0x16>
		TimeOUT++;
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	3301      	adds	r3, #1
 800232c:	80fb      	strh	r3, [r7, #6]
	while (!get_bit(USART3->SR,SR_RXNE) && TimeOUT<65000 ) {
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <USART3_u8ReciveData+0x40>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <USART3_u8ReciveData+0x2c>
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002340:	4293      	cmp	r3, r2
 8002342:	d9f1      	bls.n	8002328 <USART3_u8ReciveData+0x10>
	}
//reads the byte of data from the USART3->DR register.
//This register contains the byte of data that was received from the USART peripheral.
	USART3_Local_Data=USART3->DR;
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <USART3_u8ReciveData+0x40>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	717b      	strb	r3, [r7, #5]
//Returns the received byte of data.
	return USART3_Local_Data;
 800234a:	797b      	ldrb	r3, [r7, #5]
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40004800 	.word	0x40004800

0800235c <USART_voidInit>:




void USART_voidInit(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
#if BaudRate == 115200
	USART1->BRR=0x45;
#elif BaudRate == 9600
	USART1->BRR=0x341;
#elif BaudRate == 4800
	USART1->BRR=0x683;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <USART_voidInit+0x6c>)
 8002362:	f240 6283 	movw	r2, #1667	; 0x683
 8002366:	609a      	str	r2, [r3, #8]
#endif
	clr_bit(USART1->CR1,12); // M bit for size
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <USART_voidInit+0x6c>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <USART_voidInit+0x6c>)
 800236e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002372:	60d3      	str	r3, [r2, #12]

#if Parity == Enable
	set_bit(USART1->CR1, 10);
#elif Parity == Disable
	clr_bit(USART1->CR1, 10);
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <USART_voidInit+0x6c>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <USART_voidInit+0x6c>)
 800237a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800237e:	60d3      	str	r3, [r2, #12]


#if ParityType == Odd
	set_bit(USART1->CR1, 9);
#elif ParityType == Even
	clr_bit(USART1->CR1, 9);
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <USART_voidInit+0x6c>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <USART_voidInit+0x6c>)
 8002386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800238a:	60d3      	str	r3, [r2, #12]
#endif



#if StopBits == OneStopBit
	clr_bit(USART1->CR2, 12);
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <USART_voidInit+0x6c>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <USART_voidInit+0x6c>)
 8002392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002396:	6113      	str	r3, [r2, #16]
	clr_bit(USART1->CR2, 13);
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <USART_voidInit+0x6c>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <USART_voidInit+0x6c>)
 800239e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023a2:	6113      	str	r3, [r2, #16]
#endif

#if EnableRecieveInterrupt== 1
	set_bit(USART1->CR1, 5);
#else
	clr_bit(USART1->CR1, 5);
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <USART_voidInit+0x6c>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <USART_voidInit+0x6c>)
 80023aa:	f023 0320 	bic.w	r3, r3, #32
 80023ae:	60d3      	str	r3, [r2, #12]
#endif

	set_bit(USART1->CR1, 13); // UE ---> Enable
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <USART_voidInit+0x6c>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <USART_voidInit+0x6c>)
 80023b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023ba:	60d3      	str	r3, [r2, #12]

	USART_enableRX();
 80023bc:	f000 f814 	bl	80023e8 <USART_enableRX>
	USART_enableTX();
 80023c0:	f000 f804 	bl	80023cc <USART_enableTX>


}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40013800 	.word	0x40013800

080023cc <USART_enableTX>:

//enable transmitter
void USART_enableTX(void) {
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	set_bit(USART1->CR1,3); // TE
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <USART_enableTX+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <USART_enableTX+0x18>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	40013800 	.word	0x40013800

080023e8 <USART_enableRX>:
//enable receiver
void USART_enableRX(void) {
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
	set_bit(USART1->CR1,2); // RE
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <USART_enableRX+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <USART_enableRX+0x18>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	40013800 	.word	0x40013800

08002404 <USART_voidSendByte>:




void USART_voidSendByte(u8 Data)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]

	while (!get_bit(USART1->SR,7))
 800240e:	e000      	b.n	8002412 <USART_voidSendByte+0xe>
	{
		asm("NOP");
 8002410:	bf00      	nop
	while (!get_bit(USART1->SR,7))
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <USART_voidSendByte+0x3c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f8      	beq.n	8002410 <USART_voidSendByte+0xc>
	}

	USART1->DR=Data;
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <USART_voidSendByte+0x3c>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	6053      	str	r3, [r2, #4]

	while (!get_bit(USART1->SR,6));
 8002424:	bf00      	nop
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <USART_voidSendByte+0x3c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f9      	beq.n	8002426 <USART_voidSendByte+0x22>
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40013800 	.word	0x40013800

08002444 <USART_u8ReciveData>:




u8 USART_u8ReciveData(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
	u8 Local_Data=0;
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]
	while (!get_bit(USART1->SR,5))
 800244e:	e000      	b.n	8002452 <USART_u8ReciveData+0xe>
	{
		asm("NOP");
 8002450:	bf00      	nop
	while (!get_bit(USART1->SR,5))
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <USART_u8ReciveData+0x2c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f8      	beq.n	8002450 <USART_u8ReciveData+0xc>
	}
	Local_Data=USART1->DR;
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <USART_u8ReciveData+0x2c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	71fb      	strb	r3, [r7, #7]
	return Local_Data;
 8002464:	79fb      	ldrb	r3, [r7, #7]
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40013800 	.word	0x40013800

08002474 <main>:

volatile f32 SensorTempRead;
volatile f32 SensorHumdRead;

int main()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
	RCC_voidSysClkInt();	//System Clock Init
 800247a:	f7ff fca5 	bl	8001dc8 <RCC_voidSysClkInt>


	RCC_voidEnablePerClk(RCC_APB2,  AFIO);		//Enable RCC for Alternate Functions I/O
 800247e:	2100      	movs	r1, #0
 8002480:	2002      	movs	r0, #2
 8002482:	f7ff fd0b 	bl	8001e9c <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB2,  IOPA);		//Enable RCC for GPIOA
 8002486:	2102      	movs	r1, #2
 8002488:	2002      	movs	r0, #2
 800248a:	f7ff fd07 	bl	8001e9c <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB2,  IOPB);		//Enable RCC for GPIOB
 800248e:	2103      	movs	r1, #3
 8002490:	2002      	movs	r0, #2
 8002492:	f7ff fd03 	bl	8001e9c <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB2,  USART1RCC);	//Enable RCC for USART1
 8002496:	210e      	movs	r1, #14
 8002498:	2002      	movs	r0, #2
 800249a:	f7ff fcff 	bl	8001e9c <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB1,  USART3);	//Enable RCC for USART3
 800249e:	2112      	movs	r1, #18
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7ff fcfb 	bl	8001e9c <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB1, I2C1RCC);	//Enable RCC for I2C1
 80024a6:	2115      	movs	r1, #21
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff fcf7 	bl	8001e9c <RCC_voidEnablePerClk>


	DIO_voidSetPinDirection(PORTB,PIN10,GPIO_OUTPUT_2MHZ_AFPP);		//Set Pin10 in PORTB as Output to use it as TX for USART3
 80024ae:	220a      	movs	r2, #10
 80024b0:	210a      	movs	r1, #10
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7fe feda 	bl	800126c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN11,GPIO_INPUT_FLOAT);			//Set Pin11 in PORTB as INPUT  to use it as RX for USART3
 80024b8:	2204      	movs	r2, #4
 80024ba:	210b      	movs	r1, #11
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fed5 	bl	800126c <DIO_voidSetPinDirection>


	DIO_voidSetPinDirection(PORTA,PIN9,GPIO_OUTPUT_2MHZ_AFPP);		//Set Pin9  in PORTA as Output to use it as TX for USART1
 80024c2:	220a      	movs	r2, #10
 80024c4:	2109      	movs	r1, #9
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fe fed0 	bl	800126c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN10,GPIO_INPUT_FLOAT);    		//Set Pin10 in PORTA as INPUT  to use it as RX for USART1
 80024cc:	2204      	movs	r2, #4
 80024ce:	210a      	movs	r1, #10
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fecb 	bl	800126c <DIO_voidSetPinDirection>


	DIO_voidSetPinDirection(PORTA, PIN0, GPIO_INPUT_PULL_UP_DOWN); 	//Set Pin0  in PORTA as INPUT to use it as EXTI
 80024d6:	2208      	movs	r2, #8
 80024d8:	2100      	movs	r1, #0
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fec6 	bl	800126c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA, PIN0, GPIO_HIGH); 					//Set Pin0  in PORTA as Pull Up
 80024e0:	2201      	movs	r2, #1
 80024e2:	2100      	movs	r1, #0
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7fe ff8b 	bl	8001400 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORTA,PIN6,GPIO_OUTPUT_2MHZ_PP);     //led status indicator for gsm
 80024ea:	2202      	movs	r2, #2
 80024ec:	2106      	movs	r1, #6
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7fe febc 	bl	800126c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN11,GPIO_OUTPUT_2MHZ_PP);     //led status indicator for soil sensor
 80024f4:	2202      	movs	r2, #2
 80024f6:	210b      	movs	r1, #11
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe feb7 	bl	800126c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB,PIN4,GPIO_OUTPUT_2MHZ_PP);		//Set Pin4 in PORTB as Output to use it to control switching air sensor on / off
 80024fe:	2202      	movs	r2, #2
 8002500:	2104      	movs	r1, #4
 8002502:	2001      	movs	r0, #1
 8002504:	f7fe feb2 	bl	800126c <DIO_voidSetPinDirection>

	NVIC_voidInit();									//Interrupt Initialization
 8002508:	f7ff fc2e 	bl	8001d68 <NVIC_voidInit>
	AFIO_voidsetEXTIAltFunc(PORTA, PIN0);				//Set Pin 0 in PORTA as EXTI
 800250c:	2100      	movs	r1, #0
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe fd68 	bl	8000fe4 <AFIO_voidsetEXTIAltFunc>
	EXTI_voidEnableInt(EXTI0);							//Enable EXTI0 channel
 8002514:	2000      	movs	r0, #0
 8002516:	f7ff f80f 	bl	8001538 <EXTI_voidEnableInt>
	EXTI_voidChangeSenseMode(EXTI0, IOC);				//Set Sensitive mode to be On Change
 800251a:	2100      	movs	r1, #0
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff f821 	bl	8001564 <EXTI_voidChangeSenseMode>
	NVIC_voidEnablePerInt(6);       					//NVIC  EXTI0 Enable
 8002522:	2006      	movs	r0, #6
 8002524:	f7ff fc2e 	bl	8001d84 <NVIC_voidEnablePerInt>
	EXTI_voidSetCallBack(DoorStatusUpdate 	, EXTI0); 	//Call (DoorStatusUpdate) When the interrupt fired
 8002528:	2100      	movs	r1, #0
 800252a:	4847      	ldr	r0, [pc, #284]	; (8002648 <main+0x1d4>)
 800252c:	f7ff f87e 	bl	800162c <EXTI_voidSetCallBack>


	USART3_voidInit(); 		// Initialize USART3
 8002530:	f7ff fe70 	bl	8002214 <USART3_voidInit>
	USART3_enableRX();		// Enable USART3 Receive
 8002534:	f7ff feac 	bl	8002290 <USART3_enableRX>
	USART3_enableTX();		// Enable USART3 Transmit
 8002538:	f7ff fe9c 	bl	8002274 <USART3_enableTX>


	USART_voidInit();		// Initialize USART3
 800253c:	f7ff ff0e 	bl	800235c <USART_voidInit>
	USART_enableRX();       // Enable USART3 Receive
 8002540:	f7ff ff52 	bl	80023e8 <USART_enableRX>
	USART_enableTX();       // Enable USART3 Transmit
 8002544:	f7ff ff42 	bl	80023cc <USART_enableTX>


	GSM_voidConnectToNetwork(); // Connect GSM with Network
 8002548:	f7ff f942 	bl	80017d0 <GSM_voidConnectToNetwork>


	SHT_SensorInit();			//SHT20 Sensor Initialization
 800254c:	f7ff fce4 	bl	8001f18 <SHT_SensorInit>

	DIO_voidSetPinValue(PORTA,PIN11,HIGH);
 8002550:	2201      	movs	r2, #1
 8002552:	210b      	movs	r1, #11
 8002554:	2000      	movs	r0, #0
 8002556:	f7fe ff53 	bl	8001400 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB,PIN4,HIGH);
 800255a:	2201      	movs	r2, #1
 800255c:	2104      	movs	r1, #4
 800255e:	2001      	movs	r0, #1
 8002560:	f7fe ff4e 	bl	8001400 <DIO_voidSetPinValue>
	while(1)
	{
		//GSM_voidSendData();			// Upload data in google sheet

		SOIL_voidSensorReadData();  // Update Soil sensor readings
 8002564:	f7ff fdaa 	bl	80020bc <SOIL_voidSensorReadData>
		_delay_ms(100);				// Busy wait delay
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	f7ff f917 	bl	800179c <_delay_ms>
		SensorTempRead=SHT_RecieveTemp();
 800256e:	f7ff fcef 	bl	8001f50 <SHT_RecieveTemp>
 8002572:	4603      	mov	r3, r0
 8002574:	4a35      	ldr	r2, [pc, #212]	; (800264c <main+0x1d8>)
 8002576:	6013      	str	r3, [r2, #0]
		_delay_ms(1000);
 8002578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800257c:	f7ff f90e 	bl	800179c <_delay_ms>
		SensorHumdRead=SHT_RecieveHumd();
 8002580:	f7ff fd44 	bl	800200c <SHT_RecieveHumd>
 8002584:	4603      	mov	r3, r0
 8002586:	4a32      	ldr	r2, [pc, #200]	; (8002650 <main+0x1dc>)
 8002588:	6013      	str	r3, [r2, #0]
		GSM_voidSendData();			// Upload data in google sheet
 800258a:	f7ff f9b1 	bl	80018f0 <GSM_voidSendData>

		// receive 23 character as a respond from GSM
		for (u8 i =0 ; i<23; i++)
 800258e:	2300      	movs	r3, #0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	e029      	b.n	80025e8 <main+0x174>
		{
			if(i == 0) 				// the first char in expected respond array is '+' so we need a special condition for the first element until we receive '+'
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11c      	bne.n	80025d4 <main+0x160>
			{
				while (GSMSTATUS[0]!='+' && GSMTimeOut<250) // while it did not receive '+' and the time out value is less than 250, stay in the loop
 800259a:	e00b      	b.n	80025b4 <main+0x140>
				{
					GSMSTATUS[0]=USART3_u8ReciveData();		// Receive byte and save it in the first element
 800259c:	f7ff febc 	bl	8002318 <USART3_u8ReciveData>
 80025a0:	4603      	mov	r3, r0
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <main+0x1e0>)
 80025a6:	701a      	strb	r2, [r3, #0]
					GSMTimeOut++;							// increment the timeout value
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <main+0x1e4>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b29      	ldr	r3, [pc, #164]	; (8002658 <main+0x1e4>)
 80025b2:	701a      	strb	r2, [r3, #0]
				while (GSMSTATUS[0]!='+' && GSMTimeOut<250) // while it did not receive '+' and the time out value is less than 250, stay in the loop
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <main+0x1e0>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b2b      	cmp	r3, #43	; 0x2b
 80025ba:	d003      	beq.n	80025c4 <main+0x150>
 80025bc:	4b26      	ldr	r3, [pc, #152]	; (8002658 <main+0x1e4>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2bf9      	cmp	r3, #249	; 0xf9
 80025c2:	d9eb      	bls.n	800259c <main+0x128>
				}
				GSMTimeOut=0;								// Timeout value = 0 to use it in the next loop
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <main+0x1e4>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]

				if (GSMSTATUS[0]!='+' ) // if timeout exceeded the limit and the USART did not receive '+' in the first element
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <main+0x1e0>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b2b      	cmp	r3, #43	; 0x2b
 80025d0:	d007      	beq.n	80025e2 <main+0x16e>
				{
					break;				// break the FOR loop
 80025d2:	e00c      	b.n	80025ee <main+0x17a>
				}
			}

			else // if i bigger than 0
			{
				GSMSTATUS[i]=USART3_u8ReciveData(); 		//  Receive byte and save it in the (index of i) element
 80025d4:	f7ff fea0 	bl	8002318 <USART3_u8ReciveData>
 80025d8:	4602      	mov	r2, r0
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	b2d1      	uxtb	r1, r2
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <main+0x1e0>)
 80025e0:	54d1      	strb	r1, [r2, r3]
		for (u8 i =0 ; i<23; i++)
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	3301      	adds	r3, #1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b16      	cmp	r3, #22
 80025ec:	d9d2      	bls.n	8002594 <main+0x120>
			}
		}

		/* General Note: - if the uploading of the data is done correctly the Bytes 15:17 will contain "302" */
		if (GSMSTATUS[15]!='3' || GSMSTATUS[16]!='0' || GSMSTATUS[17]!='2') // not uploaded
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <main+0x1e0>)
 80025f0:	7bdb      	ldrb	r3, [r3, #15]
 80025f2:	2b33      	cmp	r3, #51	; 0x33
 80025f4:	d107      	bne.n	8002606 <main+0x192>
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <main+0x1e0>)
 80025f8:	7c1b      	ldrb	r3, [r3, #16]
 80025fa:	2b30      	cmp	r3, #48	; 0x30
 80025fc:	d103      	bne.n	8002606 <main+0x192>
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <main+0x1e0>)
 8002600:	7c5b      	ldrb	r3, [r3, #17]
 8002602:	2b32      	cmp	r3, #50	; 0x32
 8002604:	d007      	beq.n	8002616 <main+0x1a2>
		{
			DIO_voidSetPinValue(PORTA,PIN6,LOW);
 8002606:	2200      	movs	r2, #0
 8002608:	2106      	movs	r1, #6
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe fef8 	bl	8001400 <DIO_voidSetPinValue>
			GSM_voidConnectToNetwork(); 	// Reconnect to the network and try again
 8002610:	f7ff f8de 	bl	80017d0 <GSM_voidConnectToNetwork>
 8002614:	e008      	b.n	8002628 <main+0x1b4>
		}
		else // if the uploading of the data is done correctly
		{
			DIO_voidSetPinValue(PORTA,PIN6,HIGH);
 8002616:	2201      	movs	r2, #1
 8002618:	2106      	movs	r1, #6
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fef0 	bl	8001400 <DIO_voidSetPinValue>
			_delay_ms(5000); // busy wait to the next needed upload time
 8002620:	f241 3088 	movw	r0, #5000	; 0x1388
 8002624:	f7ff f8ba 	bl	800179c <_delay_ms>
		}
		for (int i =0 ; i<23; i++) // set the whole array = zeros
 8002628:	2300      	movs	r3, #0
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	e007      	b.n	800263e <main+0x1ca>
		{
			GSMSTATUS[i]=0;
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <main+0x1e0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4413      	add	r3, r2
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
		for (int i =0 ; i<23; i++) // set the whole array = zeros
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b16      	cmp	r3, #22
 8002642:	ddf4      	ble.n	800262e <main+0x1ba>
		SOIL_voidSensorReadData();  // Update Soil sensor readings
 8002644:	e78e      	b.n	8002564 <main+0xf0>
 8002646:	bf00      	nop
 8002648:	0800265d 	.word	0x0800265d
 800264c:	20000110 	.word	0x20000110
 8002650:	20000114 	.word	0x20000114
 8002654:	200000f4 	.word	0x200000f4
 8002658:	2000010d 	.word	0x2000010d

0800265c <DoorStatusUpdate>:
}



void DoorStatusUpdate (void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	/* 	this function will be called if EXTI fired an Interrupt */
	if 		(!DIO_u8GetPinValue(PORTA, PIN0)) // check if EXTI pin =0
 8002660:	2100      	movs	r1, #0
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe ff24 	bl	80014b0 <DIO_u8GetPinValue>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <DoorStatusUpdate+0x2c>
	{	// change DoorStatus to closed
		DoorStatus[0]='C';
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <DoorStatusUpdate+0x58>)
 8002670:	2243      	movs	r2, #67	; 0x43
 8002672:	701a      	strb	r2, [r3, #0]
		DoorStatus[1]='l';
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <DoorStatusUpdate+0x58>)
 8002676:	226c      	movs	r2, #108	; 0x6c
 8002678:	705a      	strb	r2, [r3, #1]
		DoorStatus[2]='o';
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <DoorStatusUpdate+0x58>)
 800267c:	226f      	movs	r2, #111	; 0x6f
 800267e:	709a      	strb	r2, [r3, #2]
		DoorStatus[3]='s';
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <DoorStatusUpdate+0x58>)
 8002682:	2273      	movs	r2, #115	; 0x73
 8002684:	70da      	strb	r2, [r3, #3]
		DoorStatus[0]='O';
		DoorStatus[1]='p';
		DoorStatus[2]='e';
		DoorStatus[3]='n';
	}
}
 8002686:	e012      	b.n	80026ae <DoorStatusUpdate+0x52>
	else if	(DIO_u8GetPinValue(PORTA, PIN0)) // check if EXTI pin =1
 8002688:	2100      	movs	r1, #0
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe ff10 	bl	80014b0 <DIO_u8GetPinValue>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <DoorStatusUpdate+0x52>
		DoorStatus[0]='O';
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <DoorStatusUpdate+0x58>)
 8002698:	224f      	movs	r2, #79	; 0x4f
 800269a:	701a      	strb	r2, [r3, #0]
		DoorStatus[1]='p';
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <DoorStatusUpdate+0x58>)
 800269e:	2270      	movs	r2, #112	; 0x70
 80026a0:	705a      	strb	r2, [r3, #1]
		DoorStatus[2]='e';
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <DoorStatusUpdate+0x58>)
 80026a4:	2265      	movs	r2, #101	; 0x65
 80026a6:	709a      	strb	r2, [r3, #2]
		DoorStatus[3]='n';
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <DoorStatusUpdate+0x58>)
 80026aa:	226e      	movs	r2, #110	; 0x6e
 80026ac:	70da      	strb	r2, [r3, #3]
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000008 	.word	0x20000008

080026b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	; (80026f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026e6:	f000 f817 	bl	8002718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ea:	f7ff fec3 	bl	8002474 <main>

080026ee <LoopForever>:

LoopForever:
  b LoopForever
 80026ee:	e7fe      	b.n	80026ee <LoopForever>
  ldr   r0, =_estack
 80026f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80026fc:	08003800 	.word	0x08003800
  ldr r2, =_sbss
 8002700:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002704:	20000250 	.word	0x20000250

08002708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC1_2_IRQHandler>
	...

0800270c <__errno>:
 800270c:	4b01      	ldr	r3, [pc, #4]	; (8002714 <__errno+0x8>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	2000005c 	.word	0x2000005c

08002718 <__libc_init_array>:
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	2600      	movs	r6, #0
 800271c:	4d0c      	ldr	r5, [pc, #48]	; (8002750 <__libc_init_array+0x38>)
 800271e:	4c0d      	ldr	r4, [pc, #52]	; (8002754 <__libc_init_array+0x3c>)
 8002720:	1b64      	subs	r4, r4, r5
 8002722:	10a4      	asrs	r4, r4, #2
 8002724:	42a6      	cmp	r6, r4
 8002726:	d109      	bne.n	800273c <__libc_init_array+0x24>
 8002728:	f000 ff24 	bl	8003574 <_init>
 800272c:	2600      	movs	r6, #0
 800272e:	4d0a      	ldr	r5, [pc, #40]	; (8002758 <__libc_init_array+0x40>)
 8002730:	4c0a      	ldr	r4, [pc, #40]	; (800275c <__libc_init_array+0x44>)
 8002732:	1b64      	subs	r4, r4, r5
 8002734:	10a4      	asrs	r4, r4, #2
 8002736:	42a6      	cmp	r6, r4
 8002738:	d105      	bne.n	8002746 <__libc_init_array+0x2e>
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002740:	4798      	blx	r3
 8002742:	3601      	adds	r6, #1
 8002744:	e7ee      	b.n	8002724 <__libc_init_array+0xc>
 8002746:	f855 3b04 	ldr.w	r3, [r5], #4
 800274a:	4798      	blx	r3
 800274c:	3601      	adds	r6, #1
 800274e:	e7f2      	b.n	8002736 <__libc_init_array+0x1e>
 8002750:	080037f8 	.word	0x080037f8
 8002754:	080037f8 	.word	0x080037f8
 8002758:	080037f8 	.word	0x080037f8
 800275c:	080037fc 	.word	0x080037fc

08002760 <pow>:
 8002760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
 8002768:	4680      	mov	r8, r0
 800276a:	4689      	mov	r9, r1
 800276c:	f000 f868 	bl	8002840 <__ieee754_pow>
 8002770:	4622      	mov	r2, r4
 8002772:	4606      	mov	r6, r0
 8002774:	460f      	mov	r7, r1
 8002776:	462b      	mov	r3, r5
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fe f94e 	bl	8000a1c <__aeabi_dcmpun>
 8002780:	bbc8      	cbnz	r0, 80027f6 <pow+0x96>
 8002782:	2200      	movs	r2, #0
 8002784:	2300      	movs	r3, #0
 8002786:	4640      	mov	r0, r8
 8002788:	4649      	mov	r1, r9
 800278a:	f7fe f915 	bl	80009b8 <__aeabi_dcmpeq>
 800278e:	b1b8      	cbz	r0, 80027c0 <pow+0x60>
 8002790:	2200      	movs	r2, #0
 8002792:	2300      	movs	r3, #0
 8002794:	4620      	mov	r0, r4
 8002796:	4629      	mov	r1, r5
 8002798:	f7fe f90e 	bl	80009b8 <__aeabi_dcmpeq>
 800279c:	2800      	cmp	r0, #0
 800279e:	d141      	bne.n	8002824 <pow+0xc4>
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f000 f844 	bl	8002830 <finite>
 80027a8:	b328      	cbz	r0, 80027f6 <pow+0x96>
 80027aa:	2200      	movs	r2, #0
 80027ac:	2300      	movs	r3, #0
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fe f90b 	bl	80009cc <__aeabi_dcmplt>
 80027b6:	b1f0      	cbz	r0, 80027f6 <pow+0x96>
 80027b8:	f7ff ffa8 	bl	800270c <__errno>
 80027bc:	2322      	movs	r3, #34	; 0x22
 80027be:	e019      	b.n	80027f4 <pow+0x94>
 80027c0:	4630      	mov	r0, r6
 80027c2:	4639      	mov	r1, r7
 80027c4:	f000 f834 	bl	8002830 <finite>
 80027c8:	b9c8      	cbnz	r0, 80027fe <pow+0x9e>
 80027ca:	4640      	mov	r0, r8
 80027cc:	4649      	mov	r1, r9
 80027ce:	f000 f82f 	bl	8002830 <finite>
 80027d2:	b1a0      	cbz	r0, 80027fe <pow+0x9e>
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f000 f82a 	bl	8002830 <finite>
 80027dc:	b178      	cbz	r0, 80027fe <pow+0x9e>
 80027de:	4632      	mov	r2, r6
 80027e0:	463b      	mov	r3, r7
 80027e2:	4630      	mov	r0, r6
 80027e4:	4639      	mov	r1, r7
 80027e6:	f7fe f919 	bl	8000a1c <__aeabi_dcmpun>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d0e4      	beq.n	80027b8 <pow+0x58>
 80027ee:	f7ff ff8d 	bl	800270c <__errno>
 80027f2:	2321      	movs	r3, #33	; 0x21
 80027f4:	6003      	str	r3, [r0, #0]
 80027f6:	4630      	mov	r0, r6
 80027f8:	4639      	mov	r1, r7
 80027fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027fe:	2200      	movs	r2, #0
 8002800:	2300      	movs	r3, #0
 8002802:	4630      	mov	r0, r6
 8002804:	4639      	mov	r1, r7
 8002806:	f7fe f8d7 	bl	80009b8 <__aeabi_dcmpeq>
 800280a:	2800      	cmp	r0, #0
 800280c:	d0f3      	beq.n	80027f6 <pow+0x96>
 800280e:	4640      	mov	r0, r8
 8002810:	4649      	mov	r1, r9
 8002812:	f000 f80d 	bl	8002830 <finite>
 8002816:	2800      	cmp	r0, #0
 8002818:	d0ed      	beq.n	80027f6 <pow+0x96>
 800281a:	4620      	mov	r0, r4
 800281c:	4629      	mov	r1, r5
 800281e:	f000 f807 	bl	8002830 <finite>
 8002822:	e7c8      	b.n	80027b6 <pow+0x56>
 8002824:	2600      	movs	r6, #0
 8002826:	4f01      	ldr	r7, [pc, #4]	; (800282c <pow+0xcc>)
 8002828:	e7e5      	b.n	80027f6 <pow+0x96>
 800282a:	bf00      	nop
 800282c:	3ff00000 	.word	0x3ff00000

08002830 <finite>:
 8002830:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8002834:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002838:	0fc0      	lsrs	r0, r0, #31
 800283a:	4770      	bx	lr
 800283c:	0000      	movs	r0, r0
	...

08002840 <__ieee754_pow>:
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002844:	b093      	sub	sp, #76	; 0x4c
 8002846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800284a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800284e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002852:	4689      	mov	r9, r1
 8002854:	ea56 0102 	orrs.w	r1, r6, r2
 8002858:	4680      	mov	r8, r0
 800285a:	d111      	bne.n	8002880 <__ieee754_pow+0x40>
 800285c:	1803      	adds	r3, r0, r0
 800285e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002862:	4152      	adcs	r2, r2
 8002864:	4299      	cmp	r1, r3
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <__ieee754_pow+0x230>)
 8002868:	4193      	sbcs	r3, r2
 800286a:	f080 84ba 	bcs.w	80031e2 <__ieee754_pow+0x9a2>
 800286e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002872:	4640      	mov	r0, r8
 8002874:	4649      	mov	r1, r9
 8002876:	f7fd fc81 	bl	800017c <__adddf3>
 800287a:	4683      	mov	fp, r0
 800287c:	468c      	mov	ip, r1
 800287e:	e06f      	b.n	8002960 <__ieee754_pow+0x120>
 8002880:	4b7c      	ldr	r3, [pc, #496]	; (8002a74 <__ieee754_pow+0x234>)
 8002882:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002886:	429c      	cmp	r4, r3
 8002888:	464d      	mov	r5, r9
 800288a:	4682      	mov	sl, r0
 800288c:	dc06      	bgt.n	800289c <__ieee754_pow+0x5c>
 800288e:	d101      	bne.n	8002894 <__ieee754_pow+0x54>
 8002890:	2800      	cmp	r0, #0
 8002892:	d1ec      	bne.n	800286e <__ieee754_pow+0x2e>
 8002894:	429e      	cmp	r6, r3
 8002896:	dc01      	bgt.n	800289c <__ieee754_pow+0x5c>
 8002898:	d10f      	bne.n	80028ba <__ieee754_pow+0x7a>
 800289a:	b172      	cbz	r2, 80028ba <__ieee754_pow+0x7a>
 800289c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80028a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80028a4:	ea55 050a 	orrs.w	r5, r5, sl
 80028a8:	d1e1      	bne.n	800286e <__ieee754_pow+0x2e>
 80028aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80028ae:	18db      	adds	r3, r3, r3
 80028b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80028b4:	4152      	adcs	r2, r2
 80028b6:	429d      	cmp	r5, r3
 80028b8:	e7d5      	b.n	8002866 <__ieee754_pow+0x26>
 80028ba:	2d00      	cmp	r5, #0
 80028bc:	da39      	bge.n	8002932 <__ieee754_pow+0xf2>
 80028be:	4b6e      	ldr	r3, [pc, #440]	; (8002a78 <__ieee754_pow+0x238>)
 80028c0:	429e      	cmp	r6, r3
 80028c2:	dc52      	bgt.n	800296a <__ieee754_pow+0x12a>
 80028c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80028c8:	429e      	cmp	r6, r3
 80028ca:	f340 849d 	ble.w	8003208 <__ieee754_pow+0x9c8>
 80028ce:	1533      	asrs	r3, r6, #20
 80028d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80028d4:	2b14      	cmp	r3, #20
 80028d6:	dd0f      	ble.n	80028f8 <__ieee754_pow+0xb8>
 80028d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80028dc:	fa22 f103 	lsr.w	r1, r2, r3
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	4293      	cmp	r3, r2
 80028e6:	f040 848f 	bne.w	8003208 <__ieee754_pow+0x9c8>
 80028ea:	f001 0101 	and.w	r1, r1, #1
 80028ee:	f1c1 0302 	rsb	r3, r1, #2
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	b182      	cbz	r2, 8002918 <__ieee754_pow+0xd8>
 80028f6:	e05d      	b.n	80029b4 <__ieee754_pow+0x174>
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	d159      	bne.n	80029b0 <__ieee754_pow+0x170>
 80028fc:	f1c3 0314 	rsb	r3, r3, #20
 8002900:	fa46 f103 	asr.w	r1, r6, r3
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	42b3      	cmp	r3, r6
 800290a:	f040 847a 	bne.w	8003202 <__ieee754_pow+0x9c2>
 800290e:	f001 0101 	and.w	r1, r1, #1
 8002912:	f1c1 0302 	rsb	r3, r1, #2
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <__ieee754_pow+0x23c>)
 800291a:	429e      	cmp	r6, r3
 800291c:	d132      	bne.n	8002984 <__ieee754_pow+0x144>
 800291e:	2f00      	cmp	r7, #0
 8002920:	f280 846b 	bge.w	80031fa <__ieee754_pow+0x9ba>
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	2000      	movs	r0, #0
 800292a:	4954      	ldr	r1, [pc, #336]	; (8002a7c <__ieee754_pow+0x23c>)
 800292c:	f7fd ff06 	bl	800073c <__aeabi_ddiv>
 8002930:	e7a3      	b.n	800287a <__ieee754_pow+0x3a>
 8002932:	2300      	movs	r3, #0
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2a00      	cmp	r2, #0
 8002938:	d13c      	bne.n	80029b4 <__ieee754_pow+0x174>
 800293a:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <__ieee754_pow+0x234>)
 800293c:	429e      	cmp	r6, r3
 800293e:	d1eb      	bne.n	8002918 <__ieee754_pow+0xd8>
 8002940:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002944:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002948:	ea53 030a 	orrs.w	r3, r3, sl
 800294c:	f000 8449 	beq.w	80031e2 <__ieee754_pow+0x9a2>
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <__ieee754_pow+0x240>)
 8002952:	429c      	cmp	r4, r3
 8002954:	dd0b      	ble.n	800296e <__ieee754_pow+0x12e>
 8002956:	2f00      	cmp	r7, #0
 8002958:	f2c0 8449 	blt.w	80031ee <__ieee754_pow+0x9ae>
 800295c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002960:	4658      	mov	r0, fp
 8002962:	4661      	mov	r1, ip
 8002964:	b013      	add	sp, #76	; 0x4c
 8002966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296a:	2302      	movs	r3, #2
 800296c:	e7e2      	b.n	8002934 <__ieee754_pow+0xf4>
 800296e:	2f00      	cmp	r7, #0
 8002970:	f04f 0b00 	mov.w	fp, #0
 8002974:	f04f 0c00 	mov.w	ip, #0
 8002978:	daf2      	bge.n	8002960 <__ieee754_pow+0x120>
 800297a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800297e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002982:	e7ed      	b.n	8002960 <__ieee754_pow+0x120>
 8002984:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002988:	d106      	bne.n	8002998 <__ieee754_pow+0x158>
 800298a:	4642      	mov	r2, r8
 800298c:	464b      	mov	r3, r9
 800298e:	4640      	mov	r0, r8
 8002990:	4649      	mov	r1, r9
 8002992:	f7fd fda9 	bl	80004e8 <__aeabi_dmul>
 8002996:	e770      	b.n	800287a <__ieee754_pow+0x3a>
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <__ieee754_pow+0x244>)
 800299a:	429f      	cmp	r7, r3
 800299c:	d10a      	bne.n	80029b4 <__ieee754_pow+0x174>
 800299e:	2d00      	cmp	r5, #0
 80029a0:	db08      	blt.n	80029b4 <__ieee754_pow+0x174>
 80029a2:	4640      	mov	r0, r8
 80029a4:	4649      	mov	r1, r9
 80029a6:	b013      	add	sp, #76	; 0x4c
 80029a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ac:	f000 bd0a 	b.w	80033c4 <__ieee754_sqrt>
 80029b0:	2300      	movs	r3, #0
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4640      	mov	r0, r8
 80029b6:	4649      	mov	r1, r9
 80029b8:	f000 fc58 	bl	800326c <fabs>
 80029bc:	4683      	mov	fp, r0
 80029be:	468c      	mov	ip, r1
 80029c0:	f1ba 0f00 	cmp.w	sl, #0
 80029c4:	d128      	bne.n	8002a18 <__ieee754_pow+0x1d8>
 80029c6:	b124      	cbz	r4, 80029d2 <__ieee754_pow+0x192>
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <__ieee754_pow+0x23c>)
 80029ca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d122      	bne.n	8002a18 <__ieee754_pow+0x1d8>
 80029d2:	2f00      	cmp	r7, #0
 80029d4:	da07      	bge.n	80029e6 <__ieee754_pow+0x1a6>
 80029d6:	465a      	mov	r2, fp
 80029d8:	4663      	mov	r3, ip
 80029da:	2000      	movs	r0, #0
 80029dc:	4927      	ldr	r1, [pc, #156]	; (8002a7c <__ieee754_pow+0x23c>)
 80029de:	f7fd fead 	bl	800073c <__aeabi_ddiv>
 80029e2:	4683      	mov	fp, r0
 80029e4:	468c      	mov	ip, r1
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	daba      	bge.n	8002960 <__ieee754_pow+0x120>
 80029ea:	9b00      	ldr	r3, [sp, #0]
 80029ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80029f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80029f4:	431c      	orrs	r4, r3
 80029f6:	d108      	bne.n	8002a0a <__ieee754_pow+0x1ca>
 80029f8:	465a      	mov	r2, fp
 80029fa:	4663      	mov	r3, ip
 80029fc:	4658      	mov	r0, fp
 80029fe:	4661      	mov	r1, ip
 8002a00:	f7fd fbba 	bl	8000178 <__aeabi_dsub>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	e790      	b.n	800292c <__ieee754_pow+0xec>
 8002a0a:	9b00      	ldr	r3, [sp, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d1a7      	bne.n	8002960 <__ieee754_pow+0x120>
 8002a10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002a14:	469c      	mov	ip, r3
 8002a16:	e7a3      	b.n	8002960 <__ieee754_pow+0x120>
 8002a18:	0feb      	lsrs	r3, r5, #31
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8002a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a20:	9b00      	ldr	r3, [sp, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	d104      	bne.n	8002a30 <__ieee754_pow+0x1f0>
 8002a26:	4642      	mov	r2, r8
 8002a28:	464b      	mov	r3, r9
 8002a2a:	4640      	mov	r0, r8
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	e7e7      	b.n	8002a00 <__ieee754_pow+0x1c0>
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <__ieee754_pow+0x248>)
 8002a32:	429e      	cmp	r6, r3
 8002a34:	f340 80f6 	ble.w	8002c24 <__ieee754_pow+0x3e4>
 8002a38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002a3c:	429e      	cmp	r6, r3
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <__ieee754_pow+0x240>)
 8002a40:	dd09      	ble.n	8002a56 <__ieee754_pow+0x216>
 8002a42:	429c      	cmp	r4, r3
 8002a44:	dc0c      	bgt.n	8002a60 <__ieee754_pow+0x220>
 8002a46:	2f00      	cmp	r7, #0
 8002a48:	da0c      	bge.n	8002a64 <__ieee754_pow+0x224>
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	b013      	add	sp, #76	; 0x4c
 8002a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a52:	f000 bcb2 	b.w	80033ba <__math_oflow>
 8002a56:	429c      	cmp	r4, r3
 8002a58:	dbf5      	blt.n	8002a46 <__ieee754_pow+0x206>
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <__ieee754_pow+0x23c>)
 8002a5c:	429c      	cmp	r4, r3
 8002a5e:	dd15      	ble.n	8002a8c <__ieee754_pow+0x24c>
 8002a60:	2f00      	cmp	r7, #0
 8002a62:	dcf2      	bgt.n	8002a4a <__ieee754_pow+0x20a>
 8002a64:	2000      	movs	r0, #0
 8002a66:	b013      	add	sp, #76	; 0x4c
 8002a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6c:	f000 bca0 	b.w	80033b0 <__math_uflow>
 8002a70:	fff00000 	.word	0xfff00000
 8002a74:	7ff00000 	.word	0x7ff00000
 8002a78:	433fffff 	.word	0x433fffff
 8002a7c:	3ff00000 	.word	0x3ff00000
 8002a80:	3fefffff 	.word	0x3fefffff
 8002a84:	3fe00000 	.word	0x3fe00000
 8002a88:	41e00000 	.word	0x41e00000
 8002a8c:	4661      	mov	r1, ip
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4658      	mov	r0, fp
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <__ieee754_pow+0x3d0>)
 8002a94:	f7fd fb70 	bl	8000178 <__aeabi_dsub>
 8002a98:	a355      	add	r3, pc, #340	; (adr r3, 8002bf0 <__ieee754_pow+0x3b0>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	460d      	mov	r5, r1
 8002aa2:	f7fd fd21 	bl	80004e8 <__aeabi_dmul>
 8002aa6:	a354      	add	r3, pc, #336	; (adr r3, 8002bf8 <__ieee754_pow+0x3b8>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	4606      	mov	r6, r0
 8002aae:	460f      	mov	r7, r1
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	f7fd fd18 	bl	80004e8 <__aeabi_dmul>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4682      	mov	sl, r0
 8002abc:	468b      	mov	fp, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	4b54      	ldr	r3, [pc, #336]	; (8002c14 <__ieee754_pow+0x3d4>)
 8002ac4:	f7fd fd10 	bl	80004e8 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	a14c      	add	r1, pc, #304	; (adr r1, 8002c00 <__ieee754_pow+0x3c0>)
 8002ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ad2:	f7fd fb51 	bl	8000178 <__aeabi_dsub>
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	f7fd fd05 	bl	80004e8 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	494c      	ldr	r1, [pc, #304]	; (8002c18 <__ieee754_pow+0x3d8>)
 8002ae6:	f7fd fb47 	bl	8000178 <__aeabi_dsub>
 8002aea:	4622      	mov	r2, r4
 8002aec:	462b      	mov	r3, r5
 8002aee:	4680      	mov	r8, r0
 8002af0:	4689      	mov	r9, r1
 8002af2:	4620      	mov	r0, r4
 8002af4:	4629      	mov	r1, r5
 8002af6:	f7fd fcf7 	bl	80004e8 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4640      	mov	r0, r8
 8002b00:	4649      	mov	r1, r9
 8002b02:	f7fd fcf1 	bl	80004e8 <__aeabi_dmul>
 8002b06:	a340      	add	r3, pc, #256	; (adr r3, 8002c08 <__ieee754_pow+0x3c8>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fcec 	bl	80004e8 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4650      	mov	r0, sl
 8002b16:	4659      	mov	r1, fp
 8002b18:	f7fd fb2e 	bl	8000178 <__aeabi_dsub>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4604      	mov	r4, r0
 8002b22:	460d      	mov	r5, r1
 8002b24:	4630      	mov	r0, r6
 8002b26:	4639      	mov	r1, r7
 8002b28:	f7fd fb28 	bl	800017c <__adddf3>
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	4632      	mov	r2, r6
 8002b30:	463b      	mov	r3, r7
 8002b32:	4682      	mov	sl, r0
 8002b34:	468b      	mov	fp, r1
 8002b36:	f7fd fb1f 	bl	8000178 <__aeabi_dsub>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4629      	mov	r1, r5
 8002b42:	f7fd fb19 	bl	8000178 <__aeabi_dsub>
 8002b46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002b4a:	9b00      	ldr	r3, [sp, #0]
 8002b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f04f 0600 	mov.w	r6, #0
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	4b2f      	ldreq	r3, [pc, #188]	; (8002c1c <__ieee754_pow+0x3dc>)
 8002b5e:	4b2c      	ldrne	r3, [pc, #176]	; (8002c10 <__ieee754_pow+0x3d0>)
 8002b60:	4604      	mov	r4, r0
 8002b62:	460d      	mov	r5, r1
 8002b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b68:	e9cd 2300 	strd	r2, r3, [sp]
 8002b6c:	4632      	mov	r2, r6
 8002b6e:	463b      	mov	r3, r7
 8002b70:	f7fd fb02 	bl	8000178 <__aeabi_dsub>
 8002b74:	4652      	mov	r2, sl
 8002b76:	465b      	mov	r3, fp
 8002b78:	f7fd fcb6 	bl	80004e8 <__aeabi_dmul>
 8002b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b80:	4680      	mov	r8, r0
 8002b82:	4689      	mov	r9, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fcae 	bl	80004e8 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4640      	mov	r0, r8
 8002b92:	4649      	mov	r1, r9
 8002b94:	f7fd faf2 	bl	800017c <__adddf3>
 8002b98:	4632      	mov	r2, r6
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	4680      	mov	r8, r0
 8002b9e:	4689      	mov	r9, r1
 8002ba0:	4650      	mov	r0, sl
 8002ba2:	4659      	mov	r1, fp
 8002ba4:	f7fd fca0 	bl	80004e8 <__aeabi_dmul>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460d      	mov	r5, r1
 8002bac:	460b      	mov	r3, r1
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002bb8:	f7fd fae0 	bl	800017c <__adddf3>
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <__ieee754_pow+0x3e0>)
 8002bbe:	4682      	mov	sl, r0
 8002bc0:	4299      	cmp	r1, r3
 8002bc2:	460f      	mov	r7, r1
 8002bc4:	460e      	mov	r6, r1
 8002bc6:	f340 82e7 	ble.w	8003198 <__ieee754_pow+0x958>
 8002bca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002bce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002bd2:	4303      	orrs	r3, r0
 8002bd4:	f000 81e2 	beq.w	8002f9c <__ieee754_pow+0x75c>
 8002bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2300      	movs	r3, #0
 8002be0:	f7fd fef4 	bl	80009cc <__aeabi_dcmplt>
 8002be4:	3800      	subs	r0, #0
 8002be6:	bf18      	it	ne
 8002be8:	2001      	movne	r0, #1
 8002bea:	e72f      	b.n	8002a4c <__ieee754_pow+0x20c>
 8002bec:	f3af 8000 	nop.w
 8002bf0:	60000000 	.word	0x60000000
 8002bf4:	3ff71547 	.word	0x3ff71547
 8002bf8:	f85ddf44 	.word	0xf85ddf44
 8002bfc:	3e54ae0b 	.word	0x3e54ae0b
 8002c00:	55555555 	.word	0x55555555
 8002c04:	3fd55555 	.word	0x3fd55555
 8002c08:	652b82fe 	.word	0x652b82fe
 8002c0c:	3ff71547 	.word	0x3ff71547
 8002c10:	3ff00000 	.word	0x3ff00000
 8002c14:	3fd00000 	.word	0x3fd00000
 8002c18:	3fe00000 	.word	0x3fe00000
 8002c1c:	bff00000 	.word	0xbff00000
 8002c20:	408fffff 	.word	0x408fffff
 8002c24:	4bd4      	ldr	r3, [pc, #848]	; (8002f78 <__ieee754_pow+0x738>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	402b      	ands	r3, r5
 8002c2a:	b943      	cbnz	r3, 8002c3e <__ieee754_pow+0x3fe>
 8002c2c:	4658      	mov	r0, fp
 8002c2e:	4661      	mov	r1, ip
 8002c30:	4bd2      	ldr	r3, [pc, #840]	; (8002f7c <__ieee754_pow+0x73c>)
 8002c32:	f7fd fc59 	bl	80004e8 <__aeabi_dmul>
 8002c36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002c3a:	4683      	mov	fp, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	1523      	asrs	r3, r4, #20
 8002c40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002c44:	4413      	add	r3, r2
 8002c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c48:	4bcd      	ldr	r3, [pc, #820]	; (8002f80 <__ieee754_pow+0x740>)
 8002c4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002c4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002c52:	429c      	cmp	r4, r3
 8002c54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002c58:	dd08      	ble.n	8002c6c <__ieee754_pow+0x42c>
 8002c5a:	4bca      	ldr	r3, [pc, #808]	; (8002f84 <__ieee754_pow+0x744>)
 8002c5c:	429c      	cmp	r4, r3
 8002c5e:	f340 8164 	ble.w	8002f2a <__ieee754_pow+0x6ea>
 8002c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c64:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002c68:	3301      	adds	r3, #1
 8002c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c6c:	2600      	movs	r6, #0
 8002c6e:	00f3      	lsls	r3, r6, #3
 8002c70:	930d      	str	r3, [sp, #52]	; 0x34
 8002c72:	4bc5      	ldr	r3, [pc, #788]	; (8002f88 <__ieee754_pow+0x748>)
 8002c74:	4658      	mov	r0, fp
 8002c76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	461a      	mov	r2, r3
 8002c82:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002c86:	4623      	mov	r3, r4
 8002c88:	f7fd fa76 	bl	8000178 <__aeabi_dsub>
 8002c8c:	46da      	mov	sl, fp
 8002c8e:	462b      	mov	r3, r5
 8002c90:	4652      	mov	r2, sl
 8002c92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002c96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002c9a:	f7fd fa6f 	bl	800017c <__adddf3>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	49b9      	ldr	r1, [pc, #740]	; (8002f8c <__ieee754_pow+0x74c>)
 8002ca6:	f7fd fd49 	bl	800073c <__aeabi_ddiv>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002cb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002cb6:	f7fd fc17 	bl	80004e8 <__aeabi_dmul>
 8002cba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002cbe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002cc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2200      	movs	r2, #0
 8002cca:	46ab      	mov	fp, r5
 8002ccc:	106d      	asrs	r5, r5, #1
 8002cce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002cd2:	9304      	str	r3, [sp, #16]
 8002cd4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002cd8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002cdc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002ce0:	4640      	mov	r0, r8
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	f7fd fbfe 	bl	80004e8 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002cf4:	f7fd fa40 	bl	8000178 <__aeabi_dsub>
 8002cf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002cfc:	4606      	mov	r6, r0
 8002cfe:	460f      	mov	r7, r1
 8002d00:	4620      	mov	r0, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	f7fd fa38 	bl	8000178 <__aeabi_dsub>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4650      	mov	r0, sl
 8002d0e:	4659      	mov	r1, fp
 8002d10:	f7fd fa32 	bl	8000178 <__aeabi_dsub>
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	f7fd fbe6 	bl	80004e8 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4630      	mov	r0, r6
 8002d22:	4639      	mov	r1, r7
 8002d24:	f7fd fa28 	bl	8000178 <__aeabi_dsub>
 8002d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002d2c:	f7fd fbdc 	bl	80004e8 <__aeabi_dmul>
 8002d30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002d34:	4682      	mov	sl, r0
 8002d36:	468b      	mov	fp, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd fbd4 	bl	80004e8 <__aeabi_dmul>
 8002d40:	a37b      	add	r3, pc, #492	; (adr r3, 8002f30 <__ieee754_pow+0x6f0>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	4604      	mov	r4, r0
 8002d48:	460d      	mov	r5, r1
 8002d4a:	f7fd fbcd 	bl	80004e8 <__aeabi_dmul>
 8002d4e:	a37a      	add	r3, pc, #488	; (adr r3, 8002f38 <__ieee754_pow+0x6f8>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd fa12 	bl	800017c <__adddf3>
 8002d58:	4622      	mov	r2, r4
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	f7fd fbc4 	bl	80004e8 <__aeabi_dmul>
 8002d60:	a377      	add	r3, pc, #476	; (adr r3, 8002f40 <__ieee754_pow+0x700>)
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fa09 	bl	800017c <__adddf3>
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	f7fd fbbb 	bl	80004e8 <__aeabi_dmul>
 8002d72:	a375      	add	r3, pc, #468	; (adr r3, 8002f48 <__ieee754_pow+0x708>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fd fa00 	bl	800017c <__adddf3>
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	462b      	mov	r3, r5
 8002d80:	f7fd fbb2 	bl	80004e8 <__aeabi_dmul>
 8002d84:	a372      	add	r3, pc, #456	; (adr r3, 8002f50 <__ieee754_pow+0x710>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	f7fd f9f7 	bl	800017c <__adddf3>
 8002d8e:	4622      	mov	r2, r4
 8002d90:	462b      	mov	r3, r5
 8002d92:	f7fd fba9 	bl	80004e8 <__aeabi_dmul>
 8002d96:	a370      	add	r3, pc, #448	; (adr r3, 8002f58 <__ieee754_pow+0x718>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd f9ee 	bl	800017c <__adddf3>
 8002da0:	4622      	mov	r2, r4
 8002da2:	4606      	mov	r6, r0
 8002da4:	460f      	mov	r7, r1
 8002da6:	462b      	mov	r3, r5
 8002da8:	4620      	mov	r0, r4
 8002daa:	4629      	mov	r1, r5
 8002dac:	f7fd fb9c 	bl	80004e8 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4630      	mov	r0, r6
 8002db6:	4639      	mov	r1, r7
 8002db8:	f7fd fb96 	bl	80004e8 <__aeabi_dmul>
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	460d      	mov	r5, r1
 8002dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dc4:	4642      	mov	r2, r8
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	f7fd f9d8 	bl	800017c <__adddf3>
 8002dcc:	4652      	mov	r2, sl
 8002dce:	465b      	mov	r3, fp
 8002dd0:	f7fd fb8a 	bl	80004e8 <__aeabi_dmul>
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	f7fd f9d0 	bl	800017c <__adddf3>
 8002ddc:	4642      	mov	r2, r8
 8002dde:	4606      	mov	r6, r0
 8002de0:	460f      	mov	r7, r1
 8002de2:	464b      	mov	r3, r9
 8002de4:	4640      	mov	r0, r8
 8002de6:	4649      	mov	r1, r9
 8002de8:	f7fd fb7e 	bl	80004e8 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002df4:	2200      	movs	r2, #0
 8002df6:	4b66      	ldr	r3, [pc, #408]	; (8002f90 <__ieee754_pow+0x750>)
 8002df8:	f7fd f9c0 	bl	800017c <__adddf3>
 8002dfc:	4632      	mov	r2, r6
 8002dfe:	463b      	mov	r3, r7
 8002e00:	f7fd f9bc 	bl	800017c <__adddf3>
 8002e04:	2400      	movs	r4, #0
 8002e06:	460d      	mov	r5, r1
 8002e08:	4622      	mov	r2, r4
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	4649      	mov	r1, r9
 8002e10:	f7fd fb6a 	bl	80004e8 <__aeabi_dmul>
 8002e14:	2200      	movs	r2, #0
 8002e16:	4680      	mov	r8, r0
 8002e18:	4689      	mov	r9, r1
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4b5c      	ldr	r3, [pc, #368]	; (8002f90 <__ieee754_pow+0x750>)
 8002e20:	f7fd f9aa 	bl	8000178 <__aeabi_dsub>
 8002e24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e28:	f7fd f9a6 	bl	8000178 <__aeabi_dsub>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4630      	mov	r0, r6
 8002e32:	4639      	mov	r1, r7
 8002e34:	f7fd f9a0 	bl	8000178 <__aeabi_dsub>
 8002e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002e3c:	f7fd fb54 	bl	80004e8 <__aeabi_dmul>
 8002e40:	4622      	mov	r2, r4
 8002e42:	4606      	mov	r6, r0
 8002e44:	460f      	mov	r7, r1
 8002e46:	462b      	mov	r3, r5
 8002e48:	4650      	mov	r0, sl
 8002e4a:	4659      	mov	r1, fp
 8002e4c:	f7fd fb4c 	bl	80004e8 <__aeabi_dmul>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4630      	mov	r0, r6
 8002e56:	4639      	mov	r1, r7
 8002e58:	f7fd f990 	bl	800017c <__adddf3>
 8002e5c:	2400      	movs	r4, #0
 8002e5e:	4606      	mov	r6, r0
 8002e60:	460f      	mov	r7, r1
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4640      	mov	r0, r8
 8002e68:	4649      	mov	r1, r9
 8002e6a:	f7fd f987 	bl	800017c <__adddf3>
 8002e6e:	a33c      	add	r3, pc, #240	; (adr r3, 8002f60 <__ieee754_pow+0x720>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	4620      	mov	r0, r4
 8002e76:	460d      	mov	r5, r1
 8002e78:	f7fd fb36 	bl	80004e8 <__aeabi_dmul>
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	464b      	mov	r3, r9
 8002e80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002e84:	4620      	mov	r0, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	f7fd f976 	bl	8000178 <__aeabi_dsub>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4630      	mov	r0, r6
 8002e92:	4639      	mov	r1, r7
 8002e94:	f7fd f970 	bl	8000178 <__aeabi_dsub>
 8002e98:	a333      	add	r3, pc, #204	; (adr r3, 8002f68 <__ieee754_pow+0x728>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f7fd fb23 	bl	80004e8 <__aeabi_dmul>
 8002ea2:	a333      	add	r3, pc, #204	; (adr r3, 8002f70 <__ieee754_pow+0x730>)
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	460f      	mov	r7, r1
 8002eac:	4620      	mov	r0, r4
 8002eae:	4629      	mov	r1, r5
 8002eb0:	f7fd fb1a 	bl	80004e8 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4630      	mov	r0, r6
 8002eba:	4639      	mov	r1, r7
 8002ebc:	f7fd f95e 	bl	800017c <__adddf3>
 8002ec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ec2:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <__ieee754_pow+0x754>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f7fd f957 	bl	800017c <__adddf3>
 8002ece:	4680      	mov	r8, r0
 8002ed0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002ed2:	4689      	mov	r9, r1
 8002ed4:	f7fd fa9e 	bl	8000414 <__aeabi_i2d>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	460d      	mov	r5, r1
 8002edc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <__ieee754_pow+0x758>)
 8002ee4:	4413      	add	r3, r2
 8002ee6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002eea:	4642      	mov	r2, r8
 8002eec:	464b      	mov	r3, r9
 8002eee:	f7fd f945 	bl	800017c <__adddf3>
 8002ef2:	4632      	mov	r2, r6
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	f7fd f941 	bl	800017c <__adddf3>
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	f7fd f93d 	bl	800017c <__adddf3>
 8002f02:	2000      	movs	r0, #0
 8002f04:	4622      	mov	r2, r4
 8002f06:	462b      	mov	r3, r5
 8002f08:	4682      	mov	sl, r0
 8002f0a:	468b      	mov	fp, r1
 8002f0c:	f7fd f934 	bl	8000178 <__aeabi_dsub>
 8002f10:	4632      	mov	r2, r6
 8002f12:	463b      	mov	r3, r7
 8002f14:	f7fd f930 	bl	8000178 <__aeabi_dsub>
 8002f18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f1c:	f7fd f92c 	bl	8000178 <__aeabi_dsub>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4640      	mov	r0, r8
 8002f26:	4649      	mov	r1, r9
 8002f28:	e60b      	b.n	8002b42 <__ieee754_pow+0x302>
 8002f2a:	2601      	movs	r6, #1
 8002f2c:	e69f      	b.n	8002c6e <__ieee754_pow+0x42e>
 8002f2e:	bf00      	nop
 8002f30:	4a454eef 	.word	0x4a454eef
 8002f34:	3fca7e28 	.word	0x3fca7e28
 8002f38:	93c9db65 	.word	0x93c9db65
 8002f3c:	3fcd864a 	.word	0x3fcd864a
 8002f40:	a91d4101 	.word	0xa91d4101
 8002f44:	3fd17460 	.word	0x3fd17460
 8002f48:	518f264d 	.word	0x518f264d
 8002f4c:	3fd55555 	.word	0x3fd55555
 8002f50:	db6fabff 	.word	0xdb6fabff
 8002f54:	3fdb6db6 	.word	0x3fdb6db6
 8002f58:	33333303 	.word	0x33333303
 8002f5c:	3fe33333 	.word	0x3fe33333
 8002f60:	e0000000 	.word	0xe0000000
 8002f64:	3feec709 	.word	0x3feec709
 8002f68:	dc3a03fd 	.word	0xdc3a03fd
 8002f6c:	3feec709 	.word	0x3feec709
 8002f70:	145b01f5 	.word	0x145b01f5
 8002f74:	be3e2fe0 	.word	0xbe3e2fe0
 8002f78:	7ff00000 	.word	0x7ff00000
 8002f7c:	43400000 	.word	0x43400000
 8002f80:	0003988e 	.word	0x0003988e
 8002f84:	000bb679 	.word	0x000bb679
 8002f88:	080037c8 	.word	0x080037c8
 8002f8c:	3ff00000 	.word	0x3ff00000
 8002f90:	40080000 	.word	0x40080000
 8002f94:	080037e8 	.word	0x080037e8
 8002f98:	080037d8 	.word	0x080037d8
 8002f9c:	a39c      	add	r3, pc, #624	; (adr r3, 8003210 <__ieee754_pow+0x9d0>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f7fd f8e9 	bl	800017c <__adddf3>
 8002faa:	4622      	mov	r2, r4
 8002fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	4650      	mov	r0, sl
 8002fb4:	4639      	mov	r1, r7
 8002fb6:	f7fd f8df 	bl	8000178 <__aeabi_dsub>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fc2:	f7fd fd21 	bl	8000a08 <__aeabi_dcmpgt>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	f47f ae06 	bne.w	8002bd8 <__ieee754_pow+0x398>
 8002fcc:	4aa2      	ldr	r2, [pc, #648]	; (8003258 <__ieee754_pow+0xa18>)
 8002fce:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	f340 8100 	ble.w	80031d8 <__ieee754_pow+0x998>
 8002fd8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002fdc:	151b      	asrs	r3, r3, #20
 8002fde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002fe2:	fa4a fa03 	asr.w	sl, sl, r3
 8002fe6:	44b2      	add	sl, r6
 8002fe8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8002fec:	489b      	ldr	r0, [pc, #620]	; (800325c <__ieee754_pow+0xa1c>)
 8002fee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002ff2:	4108      	asrs	r0, r1
 8002ff4:	ea00 030a 	and.w	r3, r0, sl
 8002ff8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002ffc:	f1c1 0114 	rsb	r1, r1, #20
 8003000:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003004:	fa4a fa01 	asr.w	sl, sl, r1
 8003008:	2e00      	cmp	r6, #0
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	bfb8      	it	lt
 8003014:	f1ca 0a00 	rsblt	sl, sl, #0
 8003018:	f7fd f8ae 	bl	8000178 <__aeabi_dsub>
 800301c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003024:	2400      	movs	r4, #0
 8003026:	4642      	mov	r2, r8
 8003028:	464b      	mov	r3, r9
 800302a:	f7fd f8a7 	bl	800017c <__adddf3>
 800302e:	a37a      	add	r3, pc, #488	; (adr r3, 8003218 <__ieee754_pow+0x9d8>)
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	4620      	mov	r0, r4
 8003036:	460d      	mov	r5, r1
 8003038:	f7fd fa56 	bl	80004e8 <__aeabi_dmul>
 800303c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003040:	4606      	mov	r6, r0
 8003042:	460f      	mov	r7, r1
 8003044:	4620      	mov	r0, r4
 8003046:	4629      	mov	r1, r5
 8003048:	f7fd f896 	bl	8000178 <__aeabi_dsub>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4640      	mov	r0, r8
 8003052:	4649      	mov	r1, r9
 8003054:	f7fd f890 	bl	8000178 <__aeabi_dsub>
 8003058:	a371      	add	r3, pc, #452	; (adr r3, 8003220 <__ieee754_pow+0x9e0>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd fa43 	bl	80004e8 <__aeabi_dmul>
 8003062:	a371      	add	r3, pc, #452	; (adr r3, 8003228 <__ieee754_pow+0x9e8>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	4680      	mov	r8, r0
 800306a:	4689      	mov	r9, r1
 800306c:	4620      	mov	r0, r4
 800306e:	4629      	mov	r1, r5
 8003070:	f7fd fa3a 	bl	80004e8 <__aeabi_dmul>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4640      	mov	r0, r8
 800307a:	4649      	mov	r1, r9
 800307c:	f7fd f87e 	bl	800017c <__adddf3>
 8003080:	4604      	mov	r4, r0
 8003082:	460d      	mov	r5, r1
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4630      	mov	r0, r6
 800308a:	4639      	mov	r1, r7
 800308c:	f7fd f876 	bl	800017c <__adddf3>
 8003090:	4632      	mov	r2, r6
 8003092:	463b      	mov	r3, r7
 8003094:	4680      	mov	r8, r0
 8003096:	4689      	mov	r9, r1
 8003098:	f7fd f86e 	bl	8000178 <__aeabi_dsub>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	f7fd f868 	bl	8000178 <__aeabi_dsub>
 80030a8:	4642      	mov	r2, r8
 80030aa:	4606      	mov	r6, r0
 80030ac:	460f      	mov	r7, r1
 80030ae:	464b      	mov	r3, r9
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	f7fd fa18 	bl	80004e8 <__aeabi_dmul>
 80030b8:	a35d      	add	r3, pc, #372	; (adr r3, 8003230 <__ieee754_pow+0x9f0>)
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	4604      	mov	r4, r0
 80030c0:	460d      	mov	r5, r1
 80030c2:	f7fd fa11 	bl	80004e8 <__aeabi_dmul>
 80030c6:	a35c      	add	r3, pc, #368	; (adr r3, 8003238 <__ieee754_pow+0x9f8>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd f854 	bl	8000178 <__aeabi_dsub>
 80030d0:	4622      	mov	r2, r4
 80030d2:	462b      	mov	r3, r5
 80030d4:	f7fd fa08 	bl	80004e8 <__aeabi_dmul>
 80030d8:	a359      	add	r3, pc, #356	; (adr r3, 8003240 <__ieee754_pow+0xa00>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd f84d 	bl	800017c <__adddf3>
 80030e2:	4622      	mov	r2, r4
 80030e4:	462b      	mov	r3, r5
 80030e6:	f7fd f9ff 	bl	80004e8 <__aeabi_dmul>
 80030ea:	a357      	add	r3, pc, #348	; (adr r3, 8003248 <__ieee754_pow+0xa08>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd f842 	bl	8000178 <__aeabi_dsub>
 80030f4:	4622      	mov	r2, r4
 80030f6:	462b      	mov	r3, r5
 80030f8:	f7fd f9f6 	bl	80004e8 <__aeabi_dmul>
 80030fc:	a354      	add	r3, pc, #336	; (adr r3, 8003250 <__ieee754_pow+0xa10>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd f83b 	bl	800017c <__adddf3>
 8003106:	4622      	mov	r2, r4
 8003108:	462b      	mov	r3, r5
 800310a:	f7fd f9ed 	bl	80004e8 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f7fd f82f 	bl	8000178 <__aeabi_dsub>
 800311a:	4604      	mov	r4, r0
 800311c:	460d      	mov	r5, r1
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4640      	mov	r0, r8
 8003124:	4649      	mov	r1, r9
 8003126:	f7fd f9df 	bl	80004e8 <__aeabi_dmul>
 800312a:	2200      	movs	r2, #0
 800312c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd f81e 	bl	8000178 <__aeabi_dsub>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003144:	f7fd fafa 	bl	800073c <__aeabi_ddiv>
 8003148:	4632      	mov	r2, r6
 800314a:	4604      	mov	r4, r0
 800314c:	460d      	mov	r5, r1
 800314e:	463b      	mov	r3, r7
 8003150:	4640      	mov	r0, r8
 8003152:	4649      	mov	r1, r9
 8003154:	f7fd f9c8 	bl	80004e8 <__aeabi_dmul>
 8003158:	4632      	mov	r2, r6
 800315a:	463b      	mov	r3, r7
 800315c:	f7fd f80e 	bl	800017c <__adddf3>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4620      	mov	r0, r4
 8003166:	4629      	mov	r1, r5
 8003168:	f7fd f806 	bl	8000178 <__aeabi_dsub>
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	f7fd f802 	bl	8000178 <__aeabi_dsub>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	2000      	movs	r0, #0
 800317a:	4939      	ldr	r1, [pc, #228]	; (8003260 <__ieee754_pow+0xa20>)
 800317c:	f7fc fffc 	bl	8000178 <__aeabi_dsub>
 8003180:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003184:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003188:	da29      	bge.n	80031de <__ieee754_pow+0x99e>
 800318a:	4652      	mov	r2, sl
 800318c:	f000 f874 	bl	8003278 <scalbn>
 8003190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003194:	f7ff bbfd 	b.w	8002992 <__ieee754_pow+0x152>
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <__ieee754_pow+0xa24>)
 800319a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800319e:	429f      	cmp	r7, r3
 80031a0:	f77f af14 	ble.w	8002fcc <__ieee754_pow+0x78c>
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <__ieee754_pow+0xa28>)
 80031a6:	440b      	add	r3, r1
 80031a8:	4303      	orrs	r3, r0
 80031aa:	d009      	beq.n	80031c0 <__ieee754_pow+0x980>
 80031ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031b0:	2200      	movs	r2, #0
 80031b2:	2300      	movs	r3, #0
 80031b4:	f7fd fc0a 	bl	80009cc <__aeabi_dcmplt>
 80031b8:	3800      	subs	r0, #0
 80031ba:	bf18      	it	ne
 80031bc:	2001      	movne	r0, #1
 80031be:	e452      	b.n	8002a66 <__ieee754_pow+0x226>
 80031c0:	4622      	mov	r2, r4
 80031c2:	462b      	mov	r3, r5
 80031c4:	f7fc ffd8 	bl	8000178 <__aeabi_dsub>
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	f7fd fc12 	bl	80009f4 <__aeabi_dcmpge>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	f43f aefb 	beq.w	8002fcc <__ieee754_pow+0x78c>
 80031d6:	e7e9      	b.n	80031ac <__ieee754_pow+0x96c>
 80031d8:	f04f 0a00 	mov.w	sl, #0
 80031dc:	e720      	b.n	8003020 <__ieee754_pow+0x7e0>
 80031de:	4621      	mov	r1, r4
 80031e0:	e7d6      	b.n	8003190 <__ieee754_pow+0x950>
 80031e2:	f04f 0b00 	mov.w	fp, #0
 80031e6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003260 <__ieee754_pow+0xa20>
 80031ea:	f7ff bbb9 	b.w	8002960 <__ieee754_pow+0x120>
 80031ee:	f04f 0b00 	mov.w	fp, #0
 80031f2:	f04f 0c00 	mov.w	ip, #0
 80031f6:	f7ff bbb3 	b.w	8002960 <__ieee754_pow+0x120>
 80031fa:	4640      	mov	r0, r8
 80031fc:	4649      	mov	r1, r9
 80031fe:	f7ff bb3c 	b.w	800287a <__ieee754_pow+0x3a>
 8003202:	9200      	str	r2, [sp, #0]
 8003204:	f7ff bb88 	b.w	8002918 <__ieee754_pow+0xd8>
 8003208:	2300      	movs	r3, #0
 800320a:	f7ff bb72 	b.w	80028f2 <__ieee754_pow+0xb2>
 800320e:	bf00      	nop
 8003210:	652b82fe 	.word	0x652b82fe
 8003214:	3c971547 	.word	0x3c971547
 8003218:	00000000 	.word	0x00000000
 800321c:	3fe62e43 	.word	0x3fe62e43
 8003220:	fefa39ef 	.word	0xfefa39ef
 8003224:	3fe62e42 	.word	0x3fe62e42
 8003228:	0ca86c39 	.word	0x0ca86c39
 800322c:	be205c61 	.word	0xbe205c61
 8003230:	72bea4d0 	.word	0x72bea4d0
 8003234:	3e663769 	.word	0x3e663769
 8003238:	c5d26bf1 	.word	0xc5d26bf1
 800323c:	3ebbbd41 	.word	0x3ebbbd41
 8003240:	af25de2c 	.word	0xaf25de2c
 8003244:	3f11566a 	.word	0x3f11566a
 8003248:	16bebd93 	.word	0x16bebd93
 800324c:	3f66c16c 	.word	0x3f66c16c
 8003250:	5555553e 	.word	0x5555553e
 8003254:	3fc55555 	.word	0x3fc55555
 8003258:	3fe00000 	.word	0x3fe00000
 800325c:	fff00000 	.word	0xfff00000
 8003260:	3ff00000 	.word	0x3ff00000
 8003264:	4090cbff 	.word	0x4090cbff
 8003268:	3f6f3400 	.word	0x3f6f3400

0800326c <fabs>:
 800326c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003270:	4619      	mov	r1, r3
 8003272:	4770      	bx	lr
 8003274:	0000      	movs	r0, r0
	...

08003278 <scalbn>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	4616      	mov	r6, r2
 800327c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003280:	4604      	mov	r4, r0
 8003282:	460d      	mov	r5, r1
 8003284:	460b      	mov	r3, r1
 8003286:	b992      	cbnz	r2, 80032ae <scalbn+0x36>
 8003288:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800328c:	4303      	orrs	r3, r0
 800328e:	d03c      	beq.n	800330a <scalbn+0x92>
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <scalbn+0xe0>)
 8003292:	2200      	movs	r2, #0
 8003294:	f7fd f928 	bl	80004e8 <__aeabi_dmul>
 8003298:	4b30      	ldr	r3, [pc, #192]	; (800335c <scalbn+0xe4>)
 800329a:	4604      	mov	r4, r0
 800329c:	429e      	cmp	r6, r3
 800329e:	460d      	mov	r5, r1
 80032a0:	da0f      	bge.n	80032c2 <scalbn+0x4a>
 80032a2:	a329      	add	r3, pc, #164	; (adr r3, 8003348 <scalbn+0xd0>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd f91e 	bl	80004e8 <__aeabi_dmul>
 80032ac:	e006      	b.n	80032bc <scalbn+0x44>
 80032ae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80032b2:	42ba      	cmp	r2, r7
 80032b4:	d109      	bne.n	80032ca <scalbn+0x52>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f7fc ff60 	bl	800017c <__adddf3>
 80032bc:	4604      	mov	r4, r0
 80032be:	460d      	mov	r5, r1
 80032c0:	e023      	b.n	800330a <scalbn+0x92>
 80032c2:	460b      	mov	r3, r1
 80032c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80032c8:	3a36      	subs	r2, #54	; 0x36
 80032ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80032ce:	428e      	cmp	r6, r1
 80032d0:	dd0e      	ble.n	80032f0 <scalbn+0x78>
 80032d2:	a31f      	add	r3, pc, #124	; (adr r3, 8003350 <scalbn+0xd8>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80032dc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80032e0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80032e4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80032e8:	481d      	ldr	r0, [pc, #116]	; (8003360 <scalbn+0xe8>)
 80032ea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80032ee:	e7db      	b.n	80032a8 <scalbn+0x30>
 80032f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80032f4:	4432      	add	r2, r6
 80032f6:	428a      	cmp	r2, r1
 80032f8:	dceb      	bgt.n	80032d2 <scalbn+0x5a>
 80032fa:	2a00      	cmp	r2, #0
 80032fc:	dd08      	ble.n	8003310 <scalbn+0x98>
 80032fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003302:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003306:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800330a:	4620      	mov	r0, r4
 800330c:	4629      	mov	r1, r5
 800330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003310:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003314:	da0c      	bge.n	8003330 <scalbn+0xb8>
 8003316:	a30c      	add	r3, pc, #48	; (adr r3, 8003348 <scalbn+0xd0>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003320:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8003324:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8003328:	480e      	ldr	r0, [pc, #56]	; (8003364 <scalbn+0xec>)
 800332a:	f041 011f 	orr.w	r1, r1, #31
 800332e:	e7bb      	b.n	80032a8 <scalbn+0x30>
 8003330:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003334:	3236      	adds	r2, #54	; 0x36
 8003336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800333a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	2200      	movs	r2, #0
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <scalbn+0xf0>)
 8003346:	e7af      	b.n	80032a8 <scalbn+0x30>
 8003348:	c2f8f359 	.word	0xc2f8f359
 800334c:	01a56e1f 	.word	0x01a56e1f
 8003350:	8800759c 	.word	0x8800759c
 8003354:	7e37e43c 	.word	0x7e37e43c
 8003358:	43500000 	.word	0x43500000
 800335c:	ffff3cb0 	.word	0xffff3cb0
 8003360:	8800759c 	.word	0x8800759c
 8003364:	c2f8f359 	.word	0xc2f8f359
 8003368:	3c900000 	.word	0x3c900000

0800336c <with_errno>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	4604      	mov	r4, r0
 8003370:	460d      	mov	r5, r1
 8003372:	4616      	mov	r6, r2
 8003374:	f7ff f9ca 	bl	800270c <__errno>
 8003378:	4629      	mov	r1, r5
 800337a:	6006      	str	r6, [r0, #0]
 800337c:	4620      	mov	r0, r4
 800337e:	bd70      	pop	{r4, r5, r6, pc}

08003380 <xflow>:
 8003380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003382:	4615      	mov	r5, r2
 8003384:	461c      	mov	r4, r3
 8003386:	b180      	cbz	r0, 80033aa <xflow+0x2a>
 8003388:	4610      	mov	r0, r2
 800338a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800338e:	e9cd 0100 	strd	r0, r1, [sp]
 8003392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003396:	4628      	mov	r0, r5
 8003398:	4621      	mov	r1, r4
 800339a:	f7fd f8a5 	bl	80004e8 <__aeabi_dmul>
 800339e:	2222      	movs	r2, #34	; 0x22
 80033a0:	b003      	add	sp, #12
 80033a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033a6:	f7ff bfe1 	b.w	800336c <with_errno>
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	e7ee      	b.n	800338e <xflow+0xe>

080033b0 <__math_uflow>:
 80033b0:	2200      	movs	r2, #0
 80033b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80033b6:	f7ff bfe3 	b.w	8003380 <xflow>

080033ba <__math_oflow>:
 80033ba:	2200      	movs	r2, #0
 80033bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80033c0:	f7ff bfde 	b.w	8003380 <xflow>

080033c4 <__ieee754_sqrt>:
 80033c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003568 <__ieee754_sqrt+0x1a4>
 80033c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80033d0:	460b      	mov	r3, r1
 80033d2:	4606      	mov	r6, r0
 80033d4:	460d      	mov	r5, r1
 80033d6:	460a      	mov	r2, r1
 80033d8:	4604      	mov	r4, r0
 80033da:	d10e      	bne.n	80033fa <__ieee754_sqrt+0x36>
 80033dc:	4602      	mov	r2, r0
 80033de:	f7fd f883 	bl	80004e8 <__aeabi_dmul>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4630      	mov	r0, r6
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fc fec7 	bl	800017c <__adddf3>
 80033ee:	4606      	mov	r6, r0
 80033f0:	460d      	mov	r5, r1
 80033f2:	4630      	mov	r0, r6
 80033f4:	4629      	mov	r1, r5
 80033f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033fa:	2900      	cmp	r1, #0
 80033fc:	dc0d      	bgt.n	800341a <__ieee754_sqrt+0x56>
 80033fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003402:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003406:	d0f4      	beq.n	80033f2 <__ieee754_sqrt+0x2e>
 8003408:	b139      	cbz	r1, 800341a <__ieee754_sqrt+0x56>
 800340a:	4602      	mov	r2, r0
 800340c:	f7fc feb4 	bl	8000178 <__aeabi_dsub>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	f7fd f992 	bl	800073c <__aeabi_ddiv>
 8003418:	e7e9      	b.n	80033ee <__ieee754_sqrt+0x2a>
 800341a:	1512      	asrs	r2, r2, #20
 800341c:	f000 8089 	beq.w	8003532 <__ieee754_sqrt+0x16e>
 8003420:	2500      	movs	r5, #0
 8003422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003426:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800342a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342e:	07d2      	lsls	r2, r2, #31
 8003430:	bf5c      	itt	pl
 8003432:	005b      	lslpl	r3, r3, #1
 8003434:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003438:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800343c:	bf58      	it	pl
 800343e:	0064      	lslpl	r4, r4, #1
 8003440:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003444:	0062      	lsls	r2, r4, #1
 8003446:	2016      	movs	r0, #22
 8003448:	4629      	mov	r1, r5
 800344a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800344e:	1076      	asrs	r6, r6, #1
 8003450:	190f      	adds	r7, r1, r4
 8003452:	429f      	cmp	r7, r3
 8003454:	bfde      	ittt	le
 8003456:	1bdb      	suble	r3, r3, r7
 8003458:	1939      	addle	r1, r7, r4
 800345a:	192d      	addle	r5, r5, r4
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	3801      	subs	r0, #1
 8003460:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003464:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003468:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800346c:	d1f0      	bne.n	8003450 <__ieee754_sqrt+0x8c>
 800346e:	4604      	mov	r4, r0
 8003470:	2720      	movs	r7, #32
 8003472:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003476:	428b      	cmp	r3, r1
 8003478:	eb0c 0e00 	add.w	lr, ip, r0
 800347c:	dc02      	bgt.n	8003484 <__ieee754_sqrt+0xc0>
 800347e:	d113      	bne.n	80034a8 <__ieee754_sqrt+0xe4>
 8003480:	4596      	cmp	lr, r2
 8003482:	d811      	bhi.n	80034a8 <__ieee754_sqrt+0xe4>
 8003484:	f1be 0f00 	cmp.w	lr, #0
 8003488:	eb0e 000c 	add.w	r0, lr, ip
 800348c:	da56      	bge.n	800353c <__ieee754_sqrt+0x178>
 800348e:	2800      	cmp	r0, #0
 8003490:	db54      	blt.n	800353c <__ieee754_sqrt+0x178>
 8003492:	f101 0801 	add.w	r8, r1, #1
 8003496:	1a5b      	subs	r3, r3, r1
 8003498:	4641      	mov	r1, r8
 800349a:	4596      	cmp	lr, r2
 800349c:	bf88      	it	hi
 800349e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80034a2:	eba2 020e 	sub.w	r2, r2, lr
 80034a6:	4464      	add	r4, ip
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	3f01      	subs	r7, #1
 80034ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80034b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80034b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80034b8:	d1dd      	bne.n	8003476 <__ieee754_sqrt+0xb2>
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d01b      	beq.n	80034f6 <__ieee754_sqrt+0x132>
 80034be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800356c <__ieee754_sqrt+0x1a8>
 80034c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003570 <__ieee754_sqrt+0x1ac>
 80034c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80034ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80034ce:	f7fc fe53 	bl	8000178 <__aeabi_dsub>
 80034d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4640      	mov	r0, r8
 80034dc:	4649      	mov	r1, r9
 80034de:	f7fd fa7f 	bl	80009e0 <__aeabi_dcmple>
 80034e2:	b140      	cbz	r0, 80034f6 <__ieee754_sqrt+0x132>
 80034e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80034e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80034ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034f0:	d126      	bne.n	8003540 <__ieee754_sqrt+0x17c>
 80034f2:	463c      	mov	r4, r7
 80034f4:	3501      	adds	r5, #1
 80034f6:	106b      	asrs	r3, r5, #1
 80034f8:	0864      	lsrs	r4, r4, #1
 80034fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80034fe:	07ea      	lsls	r2, r5, #31
 8003500:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003504:	bf48      	it	mi
 8003506:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800350a:	4620      	mov	r0, r4
 800350c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003510:	e76d      	b.n	80033ee <__ieee754_sqrt+0x2a>
 8003512:	0ae3      	lsrs	r3, r4, #11
 8003514:	3915      	subs	r1, #21
 8003516:	0564      	lsls	r4, r4, #21
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0fa      	beq.n	8003512 <__ieee754_sqrt+0x14e>
 800351c:	02d8      	lsls	r0, r3, #11
 800351e:	d50a      	bpl.n	8003536 <__ieee754_sqrt+0x172>
 8003520:	f1c2 0020 	rsb	r0, r2, #32
 8003524:	fa24 f000 	lsr.w	r0, r4, r0
 8003528:	1e55      	subs	r5, r2, #1
 800352a:	4094      	lsls	r4, r2
 800352c:	4303      	orrs	r3, r0
 800352e:	1b4a      	subs	r2, r1, r5
 8003530:	e776      	b.n	8003420 <__ieee754_sqrt+0x5c>
 8003532:	4611      	mov	r1, r2
 8003534:	e7f0      	b.n	8003518 <__ieee754_sqrt+0x154>
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	3201      	adds	r2, #1
 800353a:	e7ef      	b.n	800351c <__ieee754_sqrt+0x158>
 800353c:	4688      	mov	r8, r1
 800353e:	e7aa      	b.n	8003496 <__ieee754_sqrt+0xd2>
 8003540:	f7fc fe1c 	bl	800017c <__adddf3>
 8003544:	e9da 8900 	ldrd	r8, r9, [sl]
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4640      	mov	r0, r8
 800354e:	4649      	mov	r1, r9
 8003550:	f7fd fa3c 	bl	80009cc <__aeabi_dcmplt>
 8003554:	b120      	cbz	r0, 8003560 <__ieee754_sqrt+0x19c>
 8003556:	1ca1      	adds	r1, r4, #2
 8003558:	bf08      	it	eq
 800355a:	3501      	addeq	r5, #1
 800355c:	3402      	adds	r4, #2
 800355e:	e7ca      	b.n	80034f6 <__ieee754_sqrt+0x132>
 8003560:	3401      	adds	r4, #1
 8003562:	f024 0401 	bic.w	r4, r4, #1
 8003566:	e7c6      	b.n	80034f6 <__ieee754_sqrt+0x132>
 8003568:	7ff00000 	.word	0x7ff00000
 800356c:	20000060 	.word	0x20000060
 8003570:	20000068 	.word	0x20000068

08003574 <_init>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr

08003580 <_fini>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr
